#!/bin/bash
# Fail2ban module - Intrusion prevention through log monitoring
# Manages fail2ban installation, configuration, and jail management

# Script metadata
[[ -z "${MODULE_VERSION:-}" ]] && readonly MODULE_VERSION="1.0.0"
[[ -z "${MODULE_NAME:-}" ]] && readonly MODULE_NAME="fail2ban"

# Fail2ban configuration
readonly FAIL2BAN_CONFIG_DIR="/etc/fail2ban"
readonly FAIL2BAN_JAIL_LOCAL="${FAIL2BAN_CONFIG_DIR}/jail.local"
readonly FAIL2BAN_JAIL_D="${FAIL2BAN_CONFIG_DIR}/jail.d"

# Default settings
readonly DEFAULT_BANTIME="${FAIL2BAN_BANTIME:-3600}"
readonly DEFAULT_FINDTIME="${FAIL2BAN_FINDTIME:-600}"
readonly DEFAULT_MAXRETRY="${FAIL2BAN_MAXRETRY:-3}"

# ============================================================================
# Fail2ban Installation
# ============================================================================

# Install fail2ban
install_fail2ban() {
    print_status "Installing fail2ban..."

    # Check if already installed
    if command -v fail2ban-client &>/dev/null; then
        print_warning "Fail2ban is already installed"
        fail2ban-client version
        return 0
    fi

    # Install fail2ban
    sudo apt update
    sudo apt install -y fail2ban

    # Install additional dependencies
    sudo apt install -y python3-systemd python3-pyinotify

    # Enable and start service
    sudo systemctl enable fail2ban
    sudo systemctl start fail2ban

    # Verify installation
    if fail2ban-client ping &>/dev/null; then
        print_success "Fail2ban installed successfully"
        fail2ban-client version
    else
        print_error "Fail2ban installation failed"
        return 1
    fi

    return 0
}

# ============================================================================
# Basic Configuration
# ============================================================================

# Configure fail2ban defaults
configure_fail2ban_defaults() {
    print_status "Configuring fail2ban defaults..."

    # Backup existing configuration
    backup_file "$FAIL2BAN_JAIL_LOCAL"

    # Create jail.local with defaults
    cat << EOF | sudo tee "$FAIL2BAN_JAIL_LOCAL" > /dev/null
# Fail2ban jail configuration
# Generated by Zero Trust Security Setup

[DEFAULT]
# Ban duration (seconds)
bantime = ${DEFAULT_BANTIME}

# Time window for counting failures (seconds)
findtime = ${DEFAULT_FINDTIME}

# Number of failures before ban
maxretry = ${DEFAULT_MAXRETRY}

# Backend for log monitoring
backend = systemd

# Email notifications
destemail = ${ADMIN_EMAIL:-root@localhost}
sender = fail2ban@$(hostname -f)
mta = sendmail

# Action to take when banning
action = %(action_mwl)s

# Ignore own IP addresses
ignoreip = 127.0.0.1/8 ::1
           ${FAIL2BAN_IGNORE_IP:-}

# Ban time increment for recidive
bantime.increment = true
bantime.factor = 1
bantime.formula = ban.Time * (1<<(ban.Count if ban.Count<20 else 20)) * banFactor
bantime.maxtime = 2w

# Database for persistent bans
dbfile = /var/lib/fail2ban/fail2ban.sqlite3
dbpurgeage = 1d
EOF

    print_success "Fail2ban defaults configured"
    return 0
}

# ============================================================================
# Jail Configuration
# ============================================================================

# Configure SSH jail
configure_ssh_jail() {
    print_status "Configuring SSH jail..."

    local ssh_port="${SSH_PORT:-22}"

    cat << EOF | sudo tee "${FAIL2BAN_JAIL_D}/sshd.conf" > /dev/null
[sshd]
enabled = true
port = $ssh_port
filter = sshd
logpath = %(sshd_log)s
backend = %(sshd_backend)s
maxretry = 3
bantime = 3600
findtime = 600

[sshd-aggressive]
enabled = true
port = $ssh_port
filter = sshd
logpath = %(sshd_log)s
backend = %(sshd_backend)s
maxretry = 2
bantime = 86400
findtime = 300

[sshd-ddos]
enabled = true
port = $ssh_port
filter = sshd-ddos
logpath = %(sshd_log)s
backend = %(sshd_backend)s
maxretry = 5
bantime = 3600
findtime = 60
EOF

    # Create custom filter for SSH DDoS
    cat << 'EOF' | sudo tee "${FAIL2BAN_CONFIG_DIR}/filter.d/sshd-ddos.conf" > /dev/null
[Definition]
failregex = ^.*sshd\[.*\]: Did not receive identification string from <HOST>.*$
            ^.*sshd\[.*\]: Connection from <HOST> port .* \[preauth\]$
ignoreregex =
EOF

    print_success "SSH jail configured"
    return 0
}

# Configure web server jails
configure_web_jails() {
    print_status "Configuring web server jails..."

    # Nginx jails
    if command -v nginx &>/dev/null; then
        cat << 'EOF' | sudo tee "${FAIL2BAN_JAIL_D}/nginx.conf" > /dev/null
[nginx-http-auth]
enabled = true
filter = nginx-http-auth
port = http,https
logpath = /var/log/nginx/error.log

[nginx-limit-req]
enabled = true
filter = nginx-limit-req
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 10
findtime = 60
bantime = 600

[nginx-botsearch]
enabled = true
filter = nginx-botsearch
port = http,https
logpath = /var/log/nginx/access.log
maxretry = 2
findtime = 600
bantime = 86400

[nginx-bad-request]
enabled = true
filter = nginx-bad-request
port = http,https
logpath = /var/log/nginx/access.log
maxretry = 3
findtime = 60
bantime = 600
EOF

        # Create nginx-bad-request filter
        cat << 'EOF' | sudo tee "${FAIL2BAN_CONFIG_DIR}/filter.d/nginx-bad-request.conf" > /dev/null
[Definition]
failregex = ^<HOST> - .* "(GET|POST|HEAD).*HTTP.*" 400 .*$
            ^<HOST> - .* "(GET|POST|HEAD).*HTTP.*" 444 .*$
ignoreregex =
EOF

        # Create nginx-botsearch filter
        cat << 'EOF' | sudo tee "${FAIL2BAN_CONFIG_DIR}/filter.d/nginx-botsearch.conf" > /dev/null
[Definition]
failregex = ^<HOST> .* "(GET|POST|HEAD) .*(\.php|\.asp|\.exe|\.pl|\.cgi|\.scgi).*" .*$
            ^<HOST> .* "(GET|POST|HEAD) .*/wp-.*\.php.*" .*$
            ^<HOST> .* "(GET|POST|HEAD) .*/phpmyadmin.*" .*$
ignoreregex =
EOF

        print_success "Nginx jails configured"
    fi

    # Apache jails
    if command -v apache2 &>/dev/null; then
        cat << 'EOF' | sudo tee "${FAIL2BAN_JAIL_D}/apache.conf" > /dev/null
[apache-auth]
enabled = true
filter = apache-auth
port = http,https
logpath = /var/log/apache*/*error.log

[apache-badbots]
enabled = true
filter = apache-badbots
port = http,https
logpath = /var/log/apache*/*access.log
maxretry = 2
bantime = 86400

[apache-noscript]
enabled = true
filter = apache-noscript
port = http,https
logpath = /var/log/apache*/*error.log
maxretry = 3
bantime = 3600

[apache-overflows]
enabled = true
filter = apache-overflows
port = http,https
logpath = /var/log/apache*/*error.log
maxretry = 2
bantime = 3600
EOF

        print_success "Apache jails configured"
    fi

    return 0
}

# Configure Docker jails
configure_docker_jails() {
    print_status "Configuring Docker jails..."

    if ! command -v docker &>/dev/null; then
        print_warning "Docker not installed, skipping Docker jails"
        return 0
    fi

    cat << 'EOF' | sudo tee "${FAIL2BAN_JAIL_D}/docker.conf" > /dev/null
[docker-unauthorized]
enabled = true
filter = docker-unauthorized
port = 2375,2376
logpath = /var/lib/docker/containers/*/*-json.log
maxretry = 3
bantime = 3600

[docker-container-abuse]
enabled = true
filter = docker-container-abuse
logpath = /var/lib/docker/containers/*/*-json.log
maxretry = 5
findtime = 300
bantime = 3600
EOF

    # Create Docker filters
    cat << 'EOF' | sudo tee "${FAIL2BAN_CONFIG_DIR}/filter.d/docker-unauthorized.conf" > /dev/null
[Definition]
failregex = .*"Unauthorized".*"<HOST>.*".*
ignoreregex =
EOF

    cat << 'EOF' | sudo tee "${FAIL2BAN_CONFIG_DIR}/filter.d/docker-container-abuse.conf" > /dev/null
[Definition]
failregex = .*container kill.*<HOST>.*
            .*container stop.*<HOST>.*
ignoreregex =
EOF

    print_success "Docker jails configured"
    return 0
}

# Configure custom jail
configure_custom_jail() {
    local jail_name="${1:-custom}"
    local port="${2:-}"
    local logpath="${3:-/var/log/syslog}"
    local filter="${4:-$jail_name}"

    print_status "Configuring custom jail: $jail_name"

    cat << EOF | sudo tee "${FAIL2BAN_JAIL_D}/${jail_name}.conf" > /dev/null
[$jail_name]
enabled = true
port = $port
filter = $filter
logpath = $logpath
maxretry = ${DEFAULT_MAXRETRY}
findtime = ${DEFAULT_FINDTIME}
bantime = ${DEFAULT_BANTIME}
EOF

    print_success "Custom jail $jail_name configured"
    return 0
}

# ============================================================================
# Recidive Configuration
# ============================================================================

# Configure recidive jail (for repeat offenders)
configure_recidive() {
    print_status "Configuring recidive jail for repeat offenders..."

    cat << 'EOF' | sudo tee "${FAIL2BAN_JAIL_D}/recidive.conf" > /dev/null
[recidive]
enabled = true
filter = recidive
logpath = /var/log/fail2ban.log
action = %(action_mwl)s
           iptables-allports[name=recidive, protocol=all]
bantime = 604800  ; 1 week
findtime = 86400   ; 1 day
maxretry = 3
EOF

    print_success "Recidive jail configured"
    return 0
}

# ============================================================================
# Action Configuration
# ============================================================================

# Configure custom actions
configure_custom_actions() {
    print_status "Configuring custom fail2ban actions..."

    # Create action for Cloudflare
    if [ -n "${CLOUDFLARE_TOKEN:-}" ]; then
        cat << 'EOF' | sudo tee "${FAIL2BAN_CONFIG_DIR}/action.d/cloudflare.conf" > /dev/null
[Definition]
actionstart =
actionstop =
actioncheck =

actionban = curl -s -X POST "https://api.cloudflare.com/client/v4/user/firewall/access_rules/rules" \
            -H "X-Auth-Email: <cfuser>" \
            -H "X-Auth-Key: <cftoken>" \
            -H "Content-Type: application/json" \
            --data '{"mode":"block","configuration":{"target":"ip","value":"<ip>"},"notes":"Fail2ban"}'

actionunban = curl -s -X DELETE "https://api.cloudflare.com/client/v4/user/firewall/access_rules/rules/$( \
              curl -s -X GET "https://api.cloudflare.com/client/v4/user/firewall/access_rules/rules?mode=block&configuration.target=ip&configuration.value=<ip>&page=1&per_page=1" \
              -H "X-Auth-Email: <cfuser>" \
              -H "X-Auth-Key: <cftoken>" \
              | grep -o '"id":"[^"]*' | cut -d'"' -f4)" \
              -H "X-Auth-Email: <cfuser>" \
              -H "X-Auth-Key: <cftoken>"

[Init]
cfuser = ${CLOUDFLARE_EMAIL}
cftoken = ${CLOUDFLARE_TOKEN}
EOF

        print_success "Cloudflare action configured"
    fi

    # Create action for Discord notifications
    if [ -n "${DISCORD_WEBHOOK:-}" ]; then
        cat << 'EOF' | sudo tee "${FAIL2BAN_CONFIG_DIR}/action.d/discord.conf" > /dev/null
[Definition]
actionstart =
actionstop =
actioncheck =

actionban = curl -X POST "<webhook>" \
            -H "Content-Type: application/json" \
            -d '{"content": "⚠️ **Fail2ban Alert**\nIP Banned: `<ip>`\nJail: `<name>`\nFailures: `<failures>`"}'

actionunban = curl -X POST "<webhook>" \
              -H "Content-Type: application/json" \
              -d '{"content": "✅ **Fail2ban Notice**\nIP Unbanned: `<ip>`\nJail: `<name>`"}'

[Init]
webhook = ${DISCORD_WEBHOOK}
EOF

        print_success "Discord notification action configured"
    fi

    return 0
}

# ============================================================================
# Management Functions
# ============================================================================

# Show fail2ban status
show_fail2ban_status() {
    print_header "Fail2ban Status"

    # Service status
    echo "Service Status:"
    systemctl status fail2ban --no-pager | head -10

    echo ""

    # Show all jails
    echo "Active Jails:"
    sudo fail2ban-client status

    echo ""

    # Show banned IPs
    echo "Currently Banned IPs:"
    for jail in $(sudo fail2ban-client status | grep "Jail list" | sed 's/.*Jail list://;s/,//g'); do
        echo "  $jail:"
        sudo fail2ban-client status "$jail" | grep "Banned IP"
    done

    return 0
}

# Ban an IP manually
ban_ip() {
    local ip="${1:-}"
    local jail="${2:-sshd}"

    if [ -z "$ip" ]; then
        print_error "IP address required"
        return 1
    fi

    print_status "Banning IP $ip in jail $jail..."

    sudo fail2ban-client set "$jail" banip "$ip"

    print_success "IP $ip banned in jail $jail"
    return 0
}

# Unban an IP
unban_ip() {
    local ip="${1:-}"
    local jail="${2:-sshd}"

    if [ -z "$ip" ]; then
        print_error "IP address required"
        return 1
    fi

    print_status "Unbanning IP $ip from jail $jail..."

    sudo fail2ban-client set "$jail" unbanip "$ip"

    print_success "IP $ip unbanned from jail $jail"
    return 0
}

# Show jail details
show_jail_status() {
    local jail="${1:-sshd}"

    print_header "Jail Status: $jail"

    sudo fail2ban-client status "$jail"

    return 0
}

# Test fail2ban regex
test_regex() {
    local logfile="${1:-}"
    local regex="${2:-}"

    if [ -z "$logfile" ] || [ -z "$regex" ]; then
        print_error "Usage: test_regex <logfile> <regex>"
        return 1
    fi

    print_status "Testing regex against log file..."

    sudo fail2ban-regex "$logfile" "$regex"

    return 0
}

# ============================================================================
# Monitoring and Reporting
# ============================================================================

# Generate fail2ban report
generate_report() {
    print_header "Fail2ban Activity Report"

    local report_file="/tmp/fail2ban-report-$(date +%Y%m%d-%H%M%S).txt"

    {
        echo "Fail2ban Activity Report"
        echo "Generated: $(date)"
        echo "========================"
        echo ""

        echo "Service Status:"
        systemctl is-active fail2ban

        echo ""
        echo "Active Jails:"
        sudo fail2ban-client status

        echo ""
        echo "Ban Statistics:"
        for jail in $(sudo fail2ban-client status | grep "Jail list" | sed 's/.*Jail list://;s/,//g'); do
            echo ""
            echo "Jail: $jail"
            sudo fail2ban-client status "$jail" | grep -E "(Currently|Total) (banned|failed)"
        done

        echo ""
        echo "Recent Bans (last 24 hours):"
        sudo journalctl -u fail2ban --since="24 hours ago" | grep "Ban" | tail -20

    } | tee "$report_file"

    print_success "Report saved to: $report_file"
    return 0
}

# ============================================================================
# Complete Setup
# ============================================================================

# Run complete fail2ban setup
setup_fail2ban_complete() {
    print_header "Complete Fail2ban Setup"

    # Install fail2ban
    install_fail2ban

    # Configure defaults
    configure_fail2ban_defaults

    # Configure jails
    configure_ssh_jail
    configure_web_jails
    configure_docker_jails
    configure_recidive

    # Configure custom actions if credentials available
    configure_custom_actions

    # Reload fail2ban
    sudo fail2ban-client reload

    # Show status
    show_fail2ban_status

    print_success "Fail2ban setup completed!"
    print_warning "Remember to:"
    echo "  • Monitor banned IPs regularly"
    echo "  • Adjust ban times and thresholds as needed"
    echo "  • Whitelist trusted IP addresses"
    echo "  • Review logs for false positives"

    return 0
}

# ============================================================================
# Module Management
# ============================================================================

# Show module help
show_help() {
    cat << EOF
Fail2ban Module v${MODULE_VERSION}

Usage: $0 [OPTIONS]

OPTIONS:
    --install               Install fail2ban
    --configure             Configure fail2ban defaults
    --configure-ssh         Configure SSH jails
    --configure-web         Configure web server jails
    --configure-docker      Configure Docker jails
    --configure-recidive    Configure recidive jail
    --status                Show fail2ban status
    --ban IP [JAIL]         Ban an IP address
    --unban IP [JAIL]       Unban an IP address
    --jail-status JAIL      Show specific jail status
    --test-regex LOG REGEX  Test regex pattern
    --report                Generate activity report
    --complete              Run complete setup
    --help                  Show this help message
    --test                  Run module self-tests

EXAMPLES:
    # Complete setup
    $0 --complete

    # Check status
    $0 --status

    # Ban an IP
    $0 --ban 192.168.1.100 sshd

    # Show jail details
    $0 --jail-status sshd

    # Generate report
    $0 --report

EOF
}

# Export all functions
export -f install_fail2ban configure_fail2ban_defaults
export -f configure_ssh_jail configure_web_jails configure_docker_jails
export -f configure_custom_jail configure_recidive configure_custom_actions
export -f show_fail2ban_status ban_ip unban_ip show_jail_status
export -f test_regex generate_report setup_fail2ban_complete

# Source required libraries
# Use existing SCRIPT_DIR if available, otherwise detect it
if [[ -z "${SCRIPT_DIR:-}" ]]; then
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

# Ensure SRC_DIR is set for module loading
if [[ -z "${SRC_DIR:-}" ]]; then
    SRC_DIR="${SCRIPT_DIR}/.."
fi
source "${SCRIPT_DIR}/../lib/common.sh" 2>/dev/null || true
source "${SCRIPT_DIR}/../lib/backup.sh" 2>/dev/null || true
source "${SCRIPT_DIR}/../lib/config.sh" 2>/dev/null || true

# Main execution when run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    case "${1:-}" in
        --install)
            install_fail2ban
            ;;
        --configure)
            configure_fail2ban_defaults
            ;;
        --configure-ssh)
            configure_ssh_jail
            ;;
        --configure-web)
            configure_web_jails
            ;;
        --configure-docker)
            configure_docker_jails
            ;;
        --configure-recidive)
            configure_recidive
            ;;
        --status)
            show_fail2ban_status
            ;;
        --ban)
            ban_ip "${2}" "${3:-sshd}"
            ;;
        --unban)
            unban_ip "${2}" "${3:-sshd}"
            ;;
        --jail-status)
            show_jail_status "${2:-sshd}"
            ;;
        --test-regex)
            test_regex "${2}" "${3}"
            ;;
        --report)
            generate_report
            ;;
        --complete)
            setup_fail2ban_complete
            ;;
        --help)
            show_help
            ;;
        --test)
            echo "Running Fail2ban module tests..."
            echo "✓ Module loaded successfully"
            ;;
        *)
            echo "Fail2ban Module v${MODULE_VERSION}"
            echo "Run with --help for usage information"
            ;;
    esac
fi
