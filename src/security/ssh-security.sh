#!/bin/bash
# SSH Security module - SSH hardening and key management
# Manages SSH configuration, key-based authentication, and security settings

# Script metadata
[[ -z "${MODULE_VERSION:-}" ]] && readonly MODULE_VERSION="1.0.0"
[[ -z "${MODULE_NAME:-}" ]] && readonly MODULE_NAME="ssh-security"

# SSH Configuration
readonly SSH_CONFIG="/etc/ssh/sshd_config"
readonly SSH_CONFIG_D="/etc/ssh/sshd_config.d"
readonly SSH_PORT="${SSH_PORT:-22}"

# ============================================================================
# SSH Configuration Hardening
# ============================================================================

# Check if Coolify is installed
check_coolify_installation() {
    if [ -d "/data/coolify" ] || docker ps 2>/dev/null | grep -q coolify; then
        return 0
    fi
    return 1
}

# Harden SSH configuration
harden_ssh_config() {
    print_status "Hardening SSH configuration..."

    # Check for Coolify
    local coolify_mode=false
    if check_coolify_installation; then
        print_warning "Coolify detected - preserving required SSH settings"
        coolify_mode=true
    fi

    # Backup original config
    backup_file "$SSH_CONFIG"

    # Create hardened config
    local config_file="${SSH_CONFIG_D}/99-hardened.conf"

    cat << EOF | sudo tee "$config_file" > /dev/null
# SSH Hardened Configuration
# Generated by Zero Trust Security Setup

# Basic Settings
Port ${SSH_PORT}
Protocol 2
AddressFamily inet

# Host Keys (use only secure algorithms)
HostKey /etc/ssh/ssh_host_ed25519_key
HostKey /etc/ssh/ssh_host_rsa_key

# Authentication
PermitRootLogin prohibit-password
PubkeyAuthentication yes
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
KbdInteractiveAuthentication no
UsePAM yes
AuthenticationMethods publickey

# Limit authentication attempts
MaxAuthTries 3
MaxSessions 10
LoginGraceTime 20

# Security Settings
StrictModes yes
IgnoreRhosts yes
HostbasedAuthentication no
X11Forwarding no
PermitTunnel no
AllowAgentForwarding no
AllowTcpForwarding no
PermitUserEnvironment no

# Crypto Settings (Modern algorithms only)
KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com
HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256

# Logging
SyslogFacility AUTH
LogLevel VERBOSE

# Session Settings
ClientAliveInterval 300
ClientAliveCountMax 2
MaxStartups 10:30:60
TCPKeepAlive no

# Banner
Banner /etc/ssh/banner.txt
EOF

    # If Coolify is installed, preserve its requirements
    if [ "$coolify_mode" = true ]; then
        print_status "Applying Coolify-compatible SSH settings..."

        # Create Coolify-specific override
        local coolify_config="${SSH_CONFIG_D}/99-coolify.conf"
        cat << 'EOF' | sudo tee "$coolify_config" > /dev/null
# Coolify-specific SSH configuration
# Allow root login with public key only
PermitRootLogin prohibit-password
PubkeyAuthentication yes

# Required for Docker connectivity
AllowUsers root ubuntu
AllowTcpForwarding yes
PermitTunnel yes

# Keep connections alive for Coolify
ClientAliveInterval 60
ClientAliveCountMax 3
TCPKeepAlive yes

# Allow specific environment variables
AcceptEnv LANG LC_* GIT_*
EOF
        print_success "Coolify SSH settings preserved"
    fi

    # Create security banner
    create_ssh_banner

    # Validate configuration
    if sudo sshd -t -f "$SSH_CONFIG"; then
        print_success "SSH configuration hardened"

        # Restart SSH service
        sudo systemctl restart sshd
        print_success "SSH service restarted"
    else
        print_error "SSH configuration validation failed"
        restore_file "$SSH_CONFIG"
        return 1
    fi

    return 0
}

# Create SSH security banner
create_ssh_banner() {
    print_status "Creating SSH security banner..."

    cat << 'EOF' | sudo tee /etc/ssh/banner.txt > /dev/null
############################################################
#                      SECURITY NOTICE                     #
############################################################
# Unauthorized access to this system is strictly prohibited #
# All activities are monitored and logged                  #
# Violators will be prosecuted to the full extent of law   #
############################################################
EOF

    sudo chmod 644 /etc/ssh/banner.txt
    print_success "SSH banner created"
}

# ============================================================================
# SSH Key Management
# ============================================================================

# Generate SSH keys for user
generate_ssh_keys() {
    local user="${1:-$USER}"
    local key_type="${2:-ed25519}"
    local key_comment="${3:-$user@$(hostname)}"

    print_status "Generating SSH keys for $user..."

    local home_dir
    if [ "$user" = "root" ]; then
        home_dir="/root"
    else
        home_dir="/home/$user"
    fi

    local ssh_dir="$home_dir/.ssh"
    local key_file="$ssh_dir/id_$key_type"

    # Create .ssh directory if it doesn't exist
    if [ ! -d "$ssh_dir" ]; then
        sudo mkdir -p "$ssh_dir"
        sudo chmod 700 "$ssh_dir"
        sudo chown "$user:$user" "$ssh_dir"
    fi

    # Generate key if it doesn't exist
    if [ ! -f "$key_file" ]; then
        sudo -u "$user" ssh-keygen -t "$key_type" -C "$key_comment" -f "$key_file" -N ""
        print_success "SSH key generated: $key_file"
    else
        print_warning "SSH key already exists: $key_file"
    fi

    # Show public key
    echo "Public key:"
    sudo cat "${key_file}.pub"

    return 0
}

# Setup SSH key-based authentication
setup_ssh_keys() {
    local user="${1:-$USER}"
    local authorized_keys="${2:-}"

    print_status "Setting up SSH key-based authentication for $user..."

    local home_dir
    if [ "$user" = "root" ]; then
        home_dir="/root"
    else
        home_dir="/home/$user"
    fi

    local ssh_dir="$home_dir/.ssh"
    local auth_keys_file="$ssh_dir/authorized_keys"

    # Create .ssh directory
    sudo mkdir -p "$ssh_dir"
    sudo chmod 700 "$ssh_dir"
    sudo chown "$user:$user" "$ssh_dir"

    # Add authorized keys if provided
    if [ -n "$authorized_keys" ]; then
        echo "$authorized_keys" | sudo tee -a "$auth_keys_file" > /dev/null
        sudo chmod 600 "$auth_keys_file"
        sudo chown "$user:$user" "$auth_keys_file"
        print_success "Authorized keys added for $user"
    fi

    # Generate keys if they don't exist
    if [ ! -f "$ssh_dir/id_ed25519" ] && [ ! -f "$ssh_dir/id_rsa" ]; then
        generate_ssh_keys "$user"
    fi

    # Check for Coolify and setup its SSH keys if needed
    if check_coolify_installation && [ "$user" = "root" ]; then
        setup_coolify_ssh_keys
    fi

    return 0
}

# Setup Coolify-specific SSH keys
setup_coolify_ssh_keys() {
    print_status "Setting up Coolify SSH keys..."

    local coolify_ssh_dir="/data/coolify/ssh/keys"
    local coolify_key="id.root@host.docker.internal"

    # Check if keys already exist
    if [ -f "$coolify_ssh_dir/$coolify_key" ]; then
        print_status "Coolify SSH keys already exist"
    else
        # Generate Coolify-specific SSH keys
        print_status "Generating Coolify-specific SSH keys..."
        sudo mkdir -p "$coolify_ssh_dir"
        sudo ssh-keygen -t ed25519 -a 100 \
            -f "$coolify_ssh_dir/$coolify_key" \
            -q -N "" -C root@coolify

        # Set correct ownership (9999 is Coolify's container user)
        sudo chown -R 9999:9999 "$coolify_ssh_dir"
        print_success "Coolify SSH keys generated"
    fi

    # Add to authorized_keys
    if [ -f "$coolify_ssh_dir/${coolify_key}.pub" ]; then
        local pub_key=$(sudo cat "$coolify_ssh_dir/${coolify_key}.pub")
        if ! sudo grep -q "$pub_key" /root/.ssh/authorized_keys 2>/dev/null; then
            echo "$pub_key" | sudo tee -a /root/.ssh/authorized_keys > /dev/null
            print_success "Coolify SSH key added to authorized_keys"
        fi
    fi

    return 0
}

# ============================================================================
# SSH Access Control
# ============================================================================

# Configure SSH allow/deny lists
configure_ssh_access() {
    print_status "Configuring SSH access control..."

    local allow_users="${1:-}"
    local allow_groups="${2:-}"
    local deny_users="${3:-}"
    local deny_groups="${4:-}"

    local config_file="${SSH_CONFIG_D}/98-access-control.conf"

    # Start config file
    echo "# SSH Access Control" | sudo tee "$config_file" > /dev/null

    # Add allow lists
    if [ -n "$allow_users" ]; then
        echo "AllowUsers $allow_users" | sudo tee -a "$config_file" > /dev/null
        print_status "Allowed users: $allow_users"
    fi

    if [ -n "$allow_groups" ]; then
        echo "AllowGroups $allow_groups" | sudo tee -a "$config_file" > /dev/null
        print_status "Allowed groups: $allow_groups"
    fi

    # Add deny lists
    if [ -n "$deny_users" ]; then
        echo "DenyUsers $deny_users" | sudo tee -a "$config_file" > /dev/null
        print_status "Denied users: $deny_users"
    fi

    if [ -n "$deny_groups" ]; then
        echo "DenyGroups $deny_groups" | sudo tee -a "$config_file" > /dev/null
        print_status "Denied groups: $deny_groups"
    fi

    # Validate and restart
    if sudo sshd -t; then
        sudo systemctl restart sshd
        print_success "SSH access control configured"
    else
        print_error "SSH configuration validation failed"
        sudo rm -f "$config_file"
        return 1
    fi

    return 0
}

# Configure SSH for specific network only
restrict_ssh_network() {
    local network="${1:-}"

    if [ -z "$network" ]; then
        print_error "Network specification required (e.g., 192.168.1.0/24)"
        return 1
    fi

    print_status "Restricting SSH to network: $network"

    local config_file="${SSH_CONFIG_D}/97-network-restriction.conf"

    cat << EOF | sudo tee "$config_file" > /dev/null
# SSH Network Restriction
Match Address $network
    PermitRootLogin no
    PasswordAuthentication no
    PubkeyAuthentication yes

Match Address *,!$network
    DenyUsers *
EOF

    # Validate and restart
    if sudo sshd -t; then
        sudo systemctl restart sshd
        print_success "SSH restricted to network: $network"
    else
        print_error "SSH configuration validation failed"
        sudo rm -f "$config_file"
        return 1
    fi

    return 0
}

# ============================================================================
# Fail2ban Integration
# ============================================================================

# Configure fail2ban for SSH
configure_fail2ban_ssh() {
    print_status "Configuring fail2ban for SSH protection..."

    # Install fail2ban if not present
    if ! command -v fail2ban-client &> /dev/null; then
        print_status "Installing fail2ban..."
        sudo apt update
        sudo apt install -y fail2ban
    fi

    # Create SSH jail configuration
    local jail_config="/etc/fail2ban/jail.d/ssh.conf"

    cat << EOF | sudo tee "$jail_config" > /dev/null
[sshd]
enabled = true
port = ${SSH_PORT}
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
findtime = 600
bantime = 3600
ignoreip = 127.0.0.1/8 ::1

[sshd-aggressive]
enabled = true
port = ${SSH_PORT}
filter = sshd
logpath = /var/log/auth.log
maxretry = 2
findtime = 300
bantime = 86400
ignoreip = 127.0.0.1/8 ::1
EOF

    # Start and enable fail2ban
    sudo systemctl enable fail2ban
    sudo systemctl restart fail2ban

    # Check status
    sudo fail2ban-client status sshd

    print_success "Fail2ban configured for SSH"
    return 0
}

# ============================================================================
# SSH Audit and Compliance
# ============================================================================

# Audit SSH configuration
audit_ssh_config() {
    print_header "SSH Configuration Audit"

    local issues=0
    local coolify_mode=false

    # Check for Coolify
    if check_coolify_installation; then
        print_status "Coolify detected - adjusting audit criteria"
        coolify_mode=true
    fi

    # Check for password authentication
    if sudo grep -q "^PasswordAuthentication yes" "$SSH_CONFIG" 2>/dev/null || \
       sudo grep -q "^PasswordAuthentication yes" ${SSH_CONFIG_D}/*.conf 2>/dev/null; then
        print_warning "Password authentication is enabled"
        ((issues++))
    else
        print_success "Password authentication is disabled"
    fi

    # Check for root login
    if sudo grep -q "^PermitRootLogin yes" "$SSH_CONFIG" 2>/dev/null || \
       sudo grep -q "^PermitRootLogin yes" ${SSH_CONFIG_D}/*.conf 2>/dev/null; then
        print_warning "Direct root login is enabled"
        ((issues++))
    else
        print_success "Direct root login is disabled"
    fi

    # Check for X11 forwarding
    if sudo grep -q "^X11Forwarding yes" "$SSH_CONFIG" 2>/dev/null || \
       sudo grep -q "^X11Forwarding yes" ${SSH_CONFIG_D}/*.conf 2>/dev/null; then
        print_warning "X11 forwarding is enabled"
        ((issues++))
    else
        print_success "X11 forwarding is disabled"
    fi

    # Check for TCP forwarding (required for Coolify)
    if [ "$coolify_mode" = true ]; then
        if sudo grep -q "^AllowTcpForwarding yes" ${SSH_CONFIG_D}/*.conf 2>/dev/null; then
            print_success "TCP forwarding enabled (required for Coolify)"
        else
            print_warning "TCP forwarding disabled - Coolify requires this"
            ((issues++))
        fi
    else
        if sudo grep -q "^AllowTcpForwarding yes" "$SSH_CONFIG" 2>/dev/null || \
           sudo grep -q "^AllowTcpForwarding yes" ${SSH_CONFIG_D}/*.conf 2>/dev/null; then
            print_warning "TCP forwarding is enabled"
            ((issues++))
        else
            print_success "TCP forwarding is disabled"
        fi
    fi

    # Check for weak algorithms
    local weak_ciphers="3des-cbc|aes128-cbc|aes192-cbc|aes256-cbc|arcfour|blowfish-cbc|cast128-cbc"
    if sudo grep -E "^Ciphers.*($weak_ciphers)" "$SSH_CONFIG" 2>/dev/null || \
       sudo grep -E "^Ciphers.*($weak_ciphers)" ${SSH_CONFIG_D}/*.conf 2>/dev/null; then
        print_warning "Weak ciphers detected"
        ((issues++))
    else
        print_success "No weak ciphers detected"
    fi

    # Check fail2ban status
    if systemctl is-active fail2ban &>/dev/null; then
        print_success "Fail2ban is active"
    else
        print_warning "Fail2ban is not active"
        ((issues++))
    fi

    # Check Coolify SSH keys if applicable
    if [ "$coolify_mode" = true ]; then
        if [ -f "/data/coolify/ssh/keys/id.root@host.docker.internal" ]; then
            print_success "Coolify SSH keys present"
        else
            print_warning "Coolify SSH keys missing"
            ((issues++))
        fi
    fi

    # Summary
    echo ""
    if [ $issues -eq 0 ]; then
        print_success "SSH configuration audit passed with no issues"
    else
        print_warning "SSH configuration audit found $issues issue(s)"
    fi

    return $issues
}

# ============================================================================
# SSH Connection Management
# ============================================================================

# Show active SSH connections
show_ssh_connections() {
    print_header "Active SSH Connections"

    echo "Current SSH sessions:"
    who | grep pts

    echo ""
    echo "SSH connection details:"
    ss -tnp | grep :${SSH_PORT}

    echo ""
    echo "Last SSH logins:"
    last -n 10 | grep -E "pts|ssh"

    return 0
}

# Kill specific SSH session
kill_ssh_session() {
    local pts="${1:-}"

    if [ -z "$pts" ]; then
        print_error "PTS number required (e.g., pts/0)"
        return 1
    fi

    print_status "Killing SSH session: $pts"

    local pid=$(ps aux | grep "sshd.*$pts" | grep -v grep | awk '{print $2}')

    if [ -n "$pid" ]; then
        sudo kill -9 "$pid"
        print_success "SSH session $pts terminated"
    else
        print_error "SSH session $pts not found"
        return 1
    fi

    return 0
}

# ============================================================================
# Module Management
# ============================================================================

# Show module help
show_help() {
    cat << EOF
SSH Security Module v${MODULE_VERSION}

Usage: $0 [OPTIONS]

OPTIONS:
    --harden                Harden SSH configuration
    --generate-keys USER    Generate SSH keys for user
    --setup-keys USER       Setup SSH key authentication
    --access-control        Configure SSH access control
    --restrict-network NET  Restrict SSH to specific network
    --configure-fail2ban    Setup fail2ban for SSH
    --audit                 Audit SSH configuration
    --show-connections      Show active SSH connections
    --kill-session PTS      Kill specific SSH session
    --help                  Show this help message
    --test                  Run module self-tests

EXAMPLES:
    # Harden SSH configuration
    $0 --harden

    # Generate keys for user
    $0 --generate-keys ubuntu

    # Restrict to local network
    $0 --restrict-network 192.168.1.0/24

    # Audit configuration
    $0 --audit

EOF
}

# Export all functions
export -f check_coolify_installation
export -f harden_ssh_config create_ssh_banner
export -f generate_ssh_keys setup_ssh_keys setup_coolify_ssh_keys
export -f configure_ssh_access restrict_ssh_network
export -f configure_fail2ban_ssh audit_ssh_config
export -f show_ssh_connections kill_ssh_session

# Source required libraries
# Use existing SCRIPT_DIR if available, otherwise detect it
if [[ -z "${SCRIPT_DIR:-}" ]]; then
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

# Ensure SRC_DIR is set for module loading
if [[ -z "${SRC_DIR:-}" ]]; then
    SRC_DIR="${SCRIPT_DIR}/.."
fi
source "${SCRIPT_DIR}/../lib/common.sh" 2>/dev/null || true
source "${SCRIPT_DIR}/../lib/backup.sh" 2>/dev/null || true

# Main execution when run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    case "${1:-}" in
        --harden)
            harden_ssh_config
            ;;
        --generate-keys)
            generate_ssh_keys "${2:-$USER}"
            ;;
        --setup-keys)
            setup_ssh_keys "${2:-$USER}" "${3:-}"
            ;;
        --access-control)
            configure_ssh_access "${2:-}" "${3:-}" "${4:-}" "${5:-}"
            ;;
        --restrict-network)
            restrict_ssh_network "${2}"
            ;;
        --configure-fail2ban)
            configure_fail2ban_ssh
            ;;
        --audit)
            audit_ssh_config
            ;;
        --show-connections)
            show_ssh_connections
            ;;
        --kill-session)
            kill_ssh_session "${2}"
            ;;
        --help)
            show_help
            ;;
        --test)
            echo "Running SSH Security module tests..."
            echo "✓ Module loaded successfully"
            ;;
        *)
            echo "SSH Security Module v${MODULE_VERSION}"
            echo "Run with --help for usage information"
            ;;
    esac
fi
