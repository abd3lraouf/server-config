#!/bin/bash
# AIDE File Integrity Monitoring module - Advanced Intrusion Detection Environment
# Monitors and detects unauthorized changes to critical system files

# Script metadata
readonly MODULE_VERSION="1.0.0"
readonly MODULE_NAME="aide-integrity"

# Configuration
readonly AIDE_CONFIG="/etc/aide/aide.conf"
readonly AIDE_DB="/var/lib/aide/aide.db"
readonly AIDE_DB_NEW="/var/lib/aide/aide.db.new"
readonly AIDE_LOG_DIR="/var/log/aide"
readonly AIDE_REPORTS_DIR="/var/log/aide/reports"
readonly CUSTOM_RULES_DIR="/etc/aide/rules.d"

# ============================================================================
# Installation and Setup
# ============================================================================

# Install AIDE
install_aide() {
    print_header "Installing AIDE File Integrity Monitoring"

    # Check if already installed
    if command -v aide &>/dev/null; then
        print_warning "AIDE is already installed"
        aide --version
        return 0
    fi

    # Update package list
    print_status "Updating package list..."
    sudo apt update

    # Install AIDE
    print_status "Installing AIDE..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y aide aide-common

    # Create directories
    sudo mkdir -p "$AIDE_LOG_DIR"
    sudo mkdir -p "$AIDE_REPORTS_DIR"
    sudo mkdir -p "$CUSTOM_RULES_DIR"
    sudo mkdir -p "$(dirname $AIDE_DB)"

    # Set permissions
    sudo chmod 700 "$AIDE_LOG_DIR"
    sudo chmod 700 "$AIDE_REPORTS_DIR"
    sudo chmod 700 "$(dirname $AIDE_DB)"

    # Verify installation
    if command -v aide &>/dev/null; then
        print_success "AIDE installed successfully"
        aide --version
    else
        print_error "Failed to install AIDE"
        return 1
    fi

    return 0
}

# ============================================================================
# Configuration
# ============================================================================

# Configure AIDE
configure_aide() {
    print_status "Configuring AIDE..."

    # Backup original configuration
    if [ -f "$AIDE_CONFIG" ]; then
        sudo cp "$AIDE_CONFIG" "${AIDE_CONFIG}.backup-$(date +%Y%m%d)"
    fi

    # Create main configuration
    cat << 'EOF' | sudo tee "$AIDE_CONFIG" > /dev/null
# AIDE Configuration - Zero Trust Security
# Generated by Ubuntu Server Configuration Script

# Database locations
database_in=file:/var/lib/aide/aide.db
database_out=file:/var/lib/aide/aide.db.new
database_new=file:/var/lib/aide/aide.db.new

# Log file
report_url=file:/var/log/aide/aide.log
report_url=stdout

# Verbose level (0-255)
verbose=5

# Gzip database
gzip_dbout=yes

# ============================================================================
# Rule Definitions
# ============================================================================

# Basic rules
p:      Permissions
i:      Inode
n:      Number of links
u:      User
g:      Group
s:      Size
b:      Block count
m:      Mtime (modification time)
a:      Atime (access time)
c:      Ctime (change time)
S:      Check for growing size
md5:    MD5 checksum
sha1:   SHA1 checksum
sha256: SHA256 checksum
sha512: SHA512 checksum
rmd160: RMD160 checksum
tiger:  Tiger checksum
haval:  HAVAL checksum
crc32:  CRC32 checksum
gost:   GOST checksum
whirlpool: Whirlpool checksum

# Compound rules
R:      p+i+n+u+g+s+m+c+md5+sha256
L:      p+i+n+u+g
E:      Empty group
>:      Growing file p+u+g+i+n+S

# Custom rules for different file types
BinLib = p+i+n+u+g+s+b+m+c+md5+sha256
ConfFiles = p+i+n+u+g+s+b+m+c+md5+sha256
LogFiles = p+u+g+i+n+S
Devices = p+i+n+u+g+s+b+c
Databases = p+n+u+g
StaticDir = p+i+n+u+g
ManPages = p+i+n+u+g+s+m+c+md5

# ============================================================================
# System Directories
# ============================================================================

# Boot directory
/boot BinLib

# Binary directories
/bin BinLib
/sbin BinLib
/usr/bin BinLib
/usr/sbin BinLib
/usr/local/bin BinLib
/usr/local/sbin BinLib

# Library directories
/lib BinLib
/lib64 BinLib
/usr/lib BinLib
/usr/lib64 BinLib

# Configuration directories
/etc ConfFiles
!/etc/mtab
!/etc/resolv.conf
!/etc/adjtime
!/etc/fstab.d
!/etc/ld.so.cache

# Critical configuration files
/etc/passwd ConfFiles
/etc/shadow ConfFiles
/etc/group ConfFiles
/etc/gshadow ConfFiles
/etc/security ConfFiles
/etc/sudoers ConfFiles
/etc/ssh/sshd_config ConfFiles
/etc/pam.d ConfFiles

# System directories
/root R
!/root/.bash_history
!/root/.viminfo

# ============================================================================
# Log Files (monitor for growth)
# ============================================================================

/var/log LogFiles
!/var/log/journal
!/var/log/aide
!/var/log/lastlog
!/var/log/faillog
!/var/log/wtmp
!/var/log/btmp

# ============================================================================
# Exclusions
# ============================================================================

# Temporary files
!/tmp
!/var/tmp
!/var/cache
!/var/lib/aide

# Process files
!/proc
!/sys
!/dev
!/run
!/var/run

# Docker
!/var/lib/docker
!/var/lib/containerd

# Package management
!/var/lib/apt
!/var/lib/dpkg/status
!/var/lib/dpkg/available

# User home directories (optional monitoring)
#/home R
#!/home/*/.bash_history
#!/home/*/.cache

# ============================================================================
# Custom Rules (included from rules.d)
# ============================================================================

@@include /etc/aide/rules.d/*.conf

EOF

    # Create custom rules for web servers
    cat << 'EOF' | sudo tee "$CUSTOM_RULES_DIR/webserver.conf" > /dev/null
# Web Server Monitoring Rules

# Apache
/etc/apache2 ConfFiles
/var/www R
!/var/www/*/cache
!/var/www/*/tmp
!/var/www/*/logs

# Nginx
/etc/nginx ConfFiles
/usr/share/nginx R

# PHP
/etc/php ConfFiles
EOF

    # Create custom rules for databases
    cat << 'EOF' | sudo tee "$CUSTOM_RULES_DIR/database.conf" > /dev/null
# Database Monitoring Rules

# MySQL/MariaDB
/etc/mysql ConfFiles
!/var/lib/mysql

# PostgreSQL
/etc/postgresql ConfFiles
!/var/lib/postgresql

# Redis
/etc/redis ConfFiles
!/var/lib/redis

# MongoDB
/etc/mongodb.conf ConfFiles
!/var/lib/mongodb
EOF

    # Create custom rules for Docker
    cat << 'EOF' | sudo tee "$CUSTOM_RULES_DIR/docker.conf" > /dev/null
# Docker Monitoring Rules

/etc/docker ConfFiles
/usr/bin/docker BinLib
/usr/bin/docker-compose BinLib
/etc/systemd/system/docker.service ConfFiles
EOF

    print_success "AIDE configured"
    return 0
}

# ============================================================================
# Database Management
# ============================================================================

# Initialize AIDE database
initialize_database() {
    print_header "Initializing AIDE Database"
    
    print_status "This may take several minutes depending on system size..."
    
    # Initialize database
    if sudo aide --init --config="$AIDE_CONFIG"; then
        # Move new database to production
        if [ -f "$AIDE_DB_NEW" ]; then
            sudo mv "$AIDE_DB_NEW" "$AIDE_DB"
            print_success "AIDE database initialized"
            
            # Set restrictive permissions
            sudo chmod 600 "$AIDE_DB"
            sudo chown root:root "$AIDE_DB"
            
            # Show database info
            echo ""
            echo "Database location: $AIDE_DB"
            echo "Database size: $(du -h "$AIDE_DB" | awk '{print $1}')"
        else
            print_error "Database file not created"
            return 1
        fi
    else
        print_error "Failed to initialize AIDE database"
        return 1
    fi
    
    return 0
}

# Update AIDE database
update_database() {
    print_header "Updating AIDE Database"
    
    # Check if database exists
    if [ ! -f "$AIDE_DB" ]; then
        print_error "AIDE database not found. Run --init first."
        return 1
    fi
    
    # Run check first
    print_status "Running integrity check before update..."
    local report_file="$AIDE_REPORTS_DIR/pre-update-$(date +%Y%m%d-%H%M%S).txt"
    sudo aide --check --config="$AIDE_CONFIG" > "$report_file" 2>&1
    
    # Initialize new database
    print_status "Creating new database..."
    if sudo aide --init --config="$AIDE_CONFIG"; then
        # Backup old database
        sudo cp "$AIDE_DB" "${AIDE_DB}.backup-$(date +%Y%m%d-%H%M%S)"
        
        # Move new database to production
        if [ -f "$AIDE_DB_NEW" ]; then
            sudo mv "$AIDE_DB_NEW" "$AIDE_DB"
            print_success "AIDE database updated"
        else
            print_error "New database file not created"
            return 1
        fi
    else
        print_error "Failed to update AIDE database"
        return 1
    fi
    
    return 0
}

# ============================================================================
# Integrity Checking
# ============================================================================

# Run integrity check
run_check() {
    local check_type="${1:-full}"  # full, quick, custom
    local report_file="$AIDE_REPORTS_DIR/check-$(date +%Y%m%d-%H%M%S).txt"
    
    print_header "Running AIDE Integrity Check: $check_type"
    
    # Check if database exists
    if [ ! -f "$AIDE_DB" ]; then
        print_error "AIDE database not found. Run --init first."
        return 1
    fi
    
    # Run check based on type
    case "$check_type" in
        full)
            print_status "Running full system check..."
            sudo aide --check --config="$AIDE_CONFIG" > "$report_file" 2>&1
            ;;
        
        quick)
            print_status "Running quick check (critical files only)..."
            sudo aide --check --config="$AIDE_CONFIG" --limit /etc > "$report_file" 2>&1
            ;;
        
        custom)
            print_status "Running custom check..."
            read -p "Enter path to check: " check_path
            sudo aide --check --config="$AIDE_CONFIG" --limit "$check_path" > "$report_file" 2>&1
            ;;
        
        *)
            print_error "Unknown check type: $check_type"
            return 1
            ;;
    esac
    
    # Analyze results
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        print_success "No changes detected"
    else
        print_warning "Changes detected!"
        
        # Parse and display summary
        echo ""
        echo "Summary of changes:"
        grep -E "^(Added|Removed|Changed)" "$report_file" | head -20
        
        # Count changes
        local added=$(grep -c "^Added" "$report_file" 2>/dev/null || echo 0)
        local removed=$(grep -c "^Removed" "$report_file" 2>/dev/null || echo 0)
        local changed=$(grep -c "^Changed" "$report_file" 2>/dev/null || echo 0)
        
        echo ""
        echo "Statistics:"
        echo "  Files added: $added"
        echo "  Files removed: $removed"
        echo "  Files changed: $changed"
    fi
    
    echo ""
    echo "Full report saved to: $report_file"
    
    return 0
}

# Compare two databases
compare_databases() {
    local db1="${1:-$AIDE_DB}"
    local db2="${2:-}"
    
    print_header "Comparing AIDE Databases"
    
    if [ -z "$db2" ]; then
        # List available backups
        echo "Available database backups:"
        ls -la "${AIDE_DB}.backup-"* 2>/dev/null || echo "No backups found"
        echo ""
        read -p "Enter path to second database: " db2
    fi
    
    if [ ! -f "$db1" ] || [ ! -f "$db2" ]; then
        print_error "One or both database files not found"
        return 1
    fi
    
    print_status "Comparing $db1 with $db2..."
    
    local report_file="$AIDE_REPORTS_DIR/compare-$(date +%Y%m%d-%H%M%S).txt"
    sudo aide --compare --config="$AIDE_CONFIG" \
        --before="file:$db1" \
        --after="file:$db2" > "$report_file" 2>&1
    
    # Display summary
    echo ""
    echo "Comparison summary:"
    grep -E "^(Added|Removed|Changed)" "$report_file" | head -20
    
    echo ""
    echo "Full report saved to: $report_file"
    
    return 0
}

# ============================================================================
# Scheduled Monitoring
# ============================================================================

# Configure scheduled checks
configure_scheduled_checks() {
    print_status "Configuring scheduled AIDE checks..."
    
    # Create check script
    cat << 'EOF' | sudo tee /usr/local/bin/aide-check > /dev/null
#!/bin/bash
# AIDE Scheduled Check Script

LOG_DIR="/var/log/aide/reports"
REPORT_FILE="$LOG_DIR/scheduled-$(date +%Y%m%d).txt"
SUMMARY_FILE="$LOG_DIR/latest-summary.txt"
EMAIL_TO="root"

# Ensure log directory exists
mkdir -p "$LOG_DIR"

# Run AIDE check
aide --check > "$REPORT_FILE" 2>&1
EXIT_CODE=$?

# Generate summary
echo "AIDE Integrity Check - $(date)" > "$SUMMARY_FILE"
echo "===================================" >> "$SUMMARY_FILE"

if [ $EXIT_CODE -eq 0 ]; then
    echo "Status: No changes detected" >> "$SUMMARY_FILE"
else
    echo "Status: CHANGES DETECTED!" >> "$SUMMARY_FILE"
    echo "" >> "$SUMMARY_FILE"
    
    # Extract summary
    echo "Summary:" >> "$SUMMARY_FILE"
    grep -E "^(Added|Removed|Changed)" "$REPORT_FILE" | head -10 >> "$SUMMARY_FILE"
    
    # Count changes
    ADDED=$(grep -c "^Added" "$REPORT_FILE" 2>/dev/null || echo 0)
    REMOVED=$(grep -c "^Removed" "$REPORT_FILE" 2>/dev/null || echo 0)
    CHANGED=$(grep -c "^Changed" "$REPORT_FILE" 2>/dev/null || echo 0)
    
    echo "" >> "$SUMMARY_FILE"
    echo "Statistics:" >> "$SUMMARY_FILE"
    echo "  Files added: $ADDED" >> "$SUMMARY_FILE"
    echo "  Files removed: $REMOVED" >> "$SUMMARY_FILE"
    echo "  Files changed: $CHANGED" >> "$SUMMARY_FILE"
    
    # Send alert
    if [ -n "$EMAIL_TO" ]; then
        cat "$SUMMARY_FILE" | mail -s "AIDE Alert: File Changes Detected on $(hostname)" "$EMAIL_TO"
    fi
    
    # Log to syslog
    logger -t aide -p security.warning "File integrity changes detected: Added=$ADDED, Removed=$REMOVED, Changed=$CHANGED"
fi

# Cleanup old reports (keep 30 days)
find "$LOG_DIR" -name "*.txt" -mtime +30 -delete
EOF
    
    sudo chmod +x /usr/local/bin/aide-check
    
    # Add to crontab (daily at 3 AM)
    (crontab -l 2>/dev/null | grep -v "aide-check"; echo "0 3 * * * /usr/local/bin/aide-check") | crontab -
    
    # Create systemd timer for more reliable scheduling
    cat << 'EOF' | sudo tee /etc/systemd/system/aide-check.service > /dev/null
[Unit]
Description=AIDE File Integrity Check
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/aide-check
User=root
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF
    
    cat << 'EOF' | sudo tee /etc/systemd/system/aide-check.timer > /dev/null
[Unit]
Description=Daily AIDE File Integrity Check
Requires=aide-check.service

[Timer]
OnCalendar=daily
AccuracySec=1h
Persistent=true

[Install]
WantedBy=timers.target
EOF
    
    # Enable systemd timer
    sudo systemctl daemon-reload
    sudo systemctl enable aide-check.timer
    sudo systemctl start aide-check.timer
    
    print_success "Scheduled checks configured (daily at 3 AM)"
    return 0
}

# ============================================================================
# Alerting and Reporting
# ============================================================================

# Configure alerts
configure_alerts() {
    local email="${1:-root}"
    
    print_status "Configuring AIDE alerts..."
    
    # Update aide-check script with email
    sudo sed -i "s/^EMAIL_TO=.*/EMAIL_TO=\"$email\"/" /usr/local/bin/aide-check
    
    # Create real-time monitoring script
    cat << 'EOF' | sudo tee /usr/local/bin/aide-monitor > /dev/null
#!/bin/bash
# AIDE Real-time Monitoring

# Critical files to monitor
CRITICAL_FILES="
/etc/passwd
/etc/shadow
/etc/sudoers
/etc/ssh/sshd_config
/boot/grub/grub.cfg
"

for file in $CRITICAL_FILES; do
    if [ -f "$file" ]; then
        # Get current checksum
        current=$(sha256sum "$file" 2>/dev/null)
        stored_file="/var/lib/aide/.monitor-$(basename $file).sha256"
        
        if [ -f "$stored_file" ]; then
            stored=$(cat "$stored_file")
            if [ "$current" != "$stored" ]; then
                echo "CRITICAL: File changed: $file" | logger -t aide-monitor -p security.crit
                echo "$current" > "$stored_file"
            fi
        else
            echo "$current" > "$stored_file"
        fi
    fi
done
EOF
    
    sudo chmod +x /usr/local/bin/aide-monitor
    
    # Add to crontab (every 5 minutes for critical files)
    (crontab -l 2>/dev/null | grep -v "aide-monitor"; echo "*/5 * * * * /usr/local/bin/aide-monitor") | crontab -
    
    print_success "Alerts configured with email: $email"
    return 0
}

# Generate report
generate_report() {
    local format="${1:-text}"  # text, html, json
    local report_file="$AIDE_REPORTS_DIR/report-$(date +%Y%m%d-%H%M%S).$format"
    
    print_header "Generating AIDE Report: $format"
    
    # Run fresh check
    local temp_check="/tmp/aide-check-$$.txt"
    sudo aide --check --config="$AIDE_CONFIG" > "$temp_check" 2>&1
    
    case "$format" in
        text)
            cp "$temp_check" "$report_file"
            ;;
        
        html)
            generate_html_report "$temp_check" "$report_file"
            ;;
        
        json)
            generate_json_report "$temp_check" "$report_file"
            ;;
        
        *)
            print_error "Unknown format: $format"
            rm -f "$temp_check"
            return 1
            ;;
    esac
    
    rm -f "$temp_check"
    
    print_success "Report generated: $report_file"
    return 0
}

# Generate HTML report
generate_html_report() {
    local input_file="$1"
    local output_file="$2"
    
    cat << 'EOF' > "$output_file"
<!DOCTYPE html>
<html>
<head>
    <title>AIDE Integrity Report</title>
    <style>
        body { font-family: monospace; margin: 20px; }
        .header { background: #333; color: white; padding: 10px; }
        .added { color: green; }
        .removed { color: red; }
        .changed { color: orange; }
        pre { background: #f0f0f0; padding: 10px; overflow-x: auto; }
    </style>
</head>
<body>
    <div class="header">
        <h1>AIDE File Integrity Report</h1>
        <p>Generated: $(date)</p>
        <p>System: $(hostname -f)</p>
    </div>
    <pre>
EOF
    
    # Process and colorize output
    while IFS= read -r line; do
        if [[ $line == Added* ]]; then
            echo "<span class='added'>$line</span>" >> "$output_file"
        elif [[ $line == Removed* ]]; then
            echo "<span class='removed'>$line</span>" >> "$output_file"
        elif [[ $line == Changed* ]]; then
            echo "<span class='changed'>$line</span>" >> "$output_file"
        else
            echo "$line" >> "$output_file"
        fi
    done < "$input_file"
    
    echo "</pre></body></html>" >> "$output_file"
}

# Generate JSON report
generate_json_report() {
    local input_file="$1"
    local output_file="$2"
    
    local added=$(grep -c "^Added" "$input_file" 2>/dev/null || echo 0)
    local removed=$(grep -c "^Removed" "$input_file" 2>/dev/null || echo 0)
    local changed=$(grep -c "^Changed" "$input_file" 2>/dev/null || echo 0)
    
    cat << EOF > "$output_file"
{
    "report": {
        "date": "$(date -Iseconds)",
        "hostname": "$(hostname -f)",
        "statistics": {
            "added": $added,
            "removed": $removed,
            "changed": $changed
        },
        "status": "$([ $((added + removed + changed)) -eq 0 ] && echo 'clean' || echo 'changes_detected')"
    }
}
EOF
}

# ============================================================================
# Complete Setup
# ============================================================================

# Run complete AIDE setup
setup_aide_complete() {
    print_header "Complete AIDE Setup"
    
    # Install AIDE
    install_aide || return 1
    
    # Configure AIDE
    configure_aide
    
    # Initialize database
    initialize_database || return 1
    
    # Configure scheduled checks
    configure_scheduled_checks
    
    # Configure alerts
    if confirm_action "Configure email alerts?"; then
        read -p "Enter email address for alerts: " email
        configure_alerts "${email:-root}"
    fi
    
    # Run initial check
    run_check "quick"
    
    print_success "AIDE setup completed!"
    print_status "Database: $AIDE_DB"
    print_status "Configuration: $AIDE_CONFIG"
    print_status "Reports: $AIDE_REPORTS_DIR"
    print_status "Daily checks: 3 AM"
    
    return 0
}

# ============================================================================
# Module Management
# ============================================================================

# Show module help
show_help() {
    cat << EOF
AIDE File Integrity Monitoring Module v${MODULE_VERSION}

Usage: $0 [OPTIONS]

OPTIONS:
    --install               Install AIDE
    --configure             Configure AIDE
    --init                  Initialize AIDE database
    --update                Update AIDE database
    --check [TYPE]          Run integrity check (full/quick/custom)
    --compare [DB1] [DB2]   Compare two databases
    --schedule              Configure scheduled checks
    --alerts [EMAIL]        Configure email alerts
    --report [FORMAT]       Generate report (text/html/json)
    --complete              Complete setup with all features
    --help                  Show this help message
    --test                  Run module self-test

EXAMPLES:
    # Initialize database
    $0 --init
    
    # Run integrity check
    $0 --check full
    
    # Update database after legitimate changes
    $0 --update
    
    # Configure alerts
    $0 --alerts admin@example.com
    
    # Generate HTML report
    $0 --report html

FILES:
    Configuration: $AIDE_CONFIG
    Database: $AIDE_DB
    Reports: $AIDE_REPORTS_DIR
    Custom Rules: $CUSTOM_RULES_DIR

EOF
}

# Run self-test
run_self_test() {
    print_header "Running AIDE Module Self-Test"
    
    local tests_passed=0
    local tests_failed=0
    
    # Test: Check if AIDE can be installed
    if command -v apt &>/dev/null; then
        ((tests_passed++))
        print_success "Package manager available"
    else
        ((tests_failed++))
        print_error "Package manager not available"
    fi
    
    # Test: Check required directories
    if [ -w "/var/lib" ] && [ -w "/var/log" ]; then
        ((tests_passed++))
        print_success "Required directories writable"
    else
        ((tests_failed++))
        print_error "Required directories not writable"
    fi
    
    # Test: Check for required commands
    for cmd in sha256sum mail crontab; do
        if command -v $cmd &>/dev/null; then
            ((tests_passed++))
            print_success "Command available: $cmd"
        else
            ((tests_failed++))
            print_warning "Command missing: $cmd"
        fi
    done
    
    # Summary
    echo ""
    echo "Test Results:"
    echo "  Passed: $tests_passed"
    echo "  Failed: $tests_failed"
    
    if [ $tests_failed -eq 0 ]; then
        print_success "All tests passed!"
        return 0
    else
        print_warning "Some tests failed, but module may still work"
        return 1
    fi
}

# Confirm action helper
confirm_action() {
    local prompt="${1:-Continue?}"
    read -p "$prompt [y/N]: " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]]
}

# Export all functions
export -f install_aide configure_aide
export -f initialize_database update_database
export -f run_check compare_databases
export -f configure_scheduled_checks configure_alerts
export -f generate_report setup_aide_complete

# Source required libraries
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/../lib/common.sh" 2>/dev/null || true
source "${SCRIPT_DIR}/../lib/backup.sh" 2>/dev/null || true

# Main execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    case "${1:-}" in
        --install)
            install_aide
            ;;
        --configure)
            configure_aide
            ;;
        --init)
            initialize_database
            ;;
        --update)
            update_database
            ;;
        --check)
            run_check "${2:-full}"
            ;;
        --compare)
            compare_databases "${2:-}" "${3:-}"
            ;;
        --schedule)
            configure_scheduled_checks
            ;;
        --alerts)
            configure_alerts "${2:-root}"
            ;;
        --report)
            generate_report "${2:-text}"
            ;;
        --complete)
            setup_aide_complete
            ;;
        --help)
            show_help
            ;;
        --test)
            run_self_test
            ;;
        *)
            echo "AIDE File Integrity Monitoring Module v${MODULE_VERSION}"
            echo "Run with --help for usage information"
            ;;
    esac
fi