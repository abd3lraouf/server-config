#!/bin/bash
# Logwatch Log Analysis module - Automated log analysis and reporting
# Provides comprehensive log monitoring, analysis, and alerting capabilities

# Script metadata
readonly MODULE_VERSION="1.0.0"
readonly MODULE_NAME="logwatch-analysis"

# Configuration
readonly LOGWATCH_CONF_DIR="/etc/logwatch"
readonly LOGWATCH_CACHE_DIR="/var/cache/logwatch"
readonly LOGWATCH_SCRIPTS_DIR="/etc/logwatch/scripts"
readonly CUSTOM_CONF_DIR="/etc/logwatch/conf"
readonly REPORT_DIR="/var/log/logwatch"

# Report settings
readonly DEFAULT_DETAIL="Med"  # Low, Med, High, or 0-10
readonly DEFAULT_RANGE="yesterday"  # yesterday, today, all
readonly DEFAULT_FORMAT="text"  # text or html
readonly DEFAULT_MAILTO="root"

# ============================================================================
# Installation and Setup
# ============================================================================

# Install Logwatch
install_logwatch() {
    print_header "Installing Logwatch Log Analysis Tool"

    # Check if already installed
    if command -v logwatch &>/dev/null; then
        print_warning "Logwatch is already installed"
        logwatch --version
        return 0
    fi

    # Update package list
    print_status "Updating package list..."
    sudo apt update

    # Install Logwatch and dependencies
    print_status "Installing Logwatch..."
    sudo apt install -y logwatch libdate-manip-perl

    # Create directories
    sudo mkdir -p "$REPORT_DIR"
    sudo mkdir -p "$CUSTOM_CONF_DIR/services"
    sudo mkdir -p "$CUSTOM_CONF_DIR/logfiles"
    sudo mkdir -p "$LOGWATCH_SCRIPTS_DIR/services"
    sudo mkdir -p "$LOGWATCH_SCRIPTS_DIR/shared"

    # Set permissions
    sudo chmod 755 "$REPORT_DIR"
    sudo chmod 755 "$CUSTOM_CONF_DIR"

    # Verify installation
    if command -v logwatch &>/dev/null; then
        print_success "Logwatch installed successfully"
        logwatch --version
    else
        print_error "Failed to install Logwatch"
        return 1
    fi

    return 0
}

# ============================================================================
# Configuration
# ============================================================================

# Configure Logwatch
configure_logwatch() {
    print_status "Configuring Logwatch..."

    # Create main configuration file
    cat << EOF | sudo tee "$CUSTOM_CONF_DIR/logwatch.conf" > /dev/null
# Logwatch Configuration - Zero Trust Security
# Generated by Ubuntu Server Configuration Script

# Output options
Output = stdout
Format = $DEFAULT_FORMAT
Encode = none

# Report range
Range = $DEFAULT_RANGE
Archives = Yes

# Detail level (Low, Med, High, or 0-10)
Detail = $DEFAULT_DETAIL

# Services to monitor (all for comprehensive monitoring)
Service = All

# Specific service overrides for security focus
Service = "-zz-network"
Service = "-zz-sys"
Service = "sshd"
Service = "sudo"
Service = "pam_unix"
Service = "secure"
Service = "iptables"
Service = "kernel"
Service = "systemd"

# Log directories
LogDir = /var/log
TmpDir = $LOGWATCH_CACHE_DIR

# Mail settings
MailTo = $DEFAULT_MAILTO
MailFrom = Logwatch

# Print options
Print = No

# Save to file
Save = $REPORT_DIR/logwatch-report.txt

# Host information
Hostname = $(hostname -f)

EOF

    # Create SSH service configuration for enhanced monitoring
    cat << 'EOF' | sudo tee "$CUSTOM_CONF_DIR/services/sshd.conf" > /dev/null
# SSH Service Configuration
Title = "SSH Security Report"

# Log file
LogFile = secure
LogFile = messages
LogFile = sshd

# Detail settings
*OnlyService = sshd
*RemoveHeaders =

# SSH-specific filters
*IgnoreHost = localhost
*IgnoreHost = 127.0.0.1

# Report failed authentication
*ReportFailedLogins = Yes
*ReportSuccessfulLogins = Yes
*ReportInvalidUsers = Yes
EOF

    # Create sudo service configuration
    cat << 'EOF' | sudo tee "$CUSTOM_CONF_DIR/services/sudo.conf" > /dev/null
# Sudo Service Configuration
Title = "Sudo Usage Report"

# Log file
LogFile = auth
LogFile = secure

# Detail settings
*OnlyService = sudo

# Report all sudo usage
*ReportUsers = All
*ReportCommands = Yes
*ReportFailures = Yes
EOF

    # Create firewall service configuration
    cat << 'EOF' | sudo tee "$CUSTOM_CONF_DIR/services/iptables.conf" > /dev/null
# Firewall Service Configuration
Title = "Firewall Activity Report"

# Log file
LogFile = messages
LogFile = kern
LogFile = iptables

# Detail settings
*OnlyService = kernel

# Report dropped/rejected packets
*ReportDropped = Yes
*ReportRejected = Yes
*ReportAccepted = No

# Threshold for reporting
*DropThreshold = 10
EOF

    print_success "Logwatch configured"
    return 0
}

# ============================================================================
# Custom Filters
# ============================================================================

# Create custom security filters
create_security_filters() {
    print_status "Creating custom security filters..."

    # Create intrusion detection filter
    cat << 'EOF' | sudo tee "$LOGWATCH_SCRIPTS_DIR/services/intrusion" > /dev/null
#!/usr/bin/perl
# Intrusion Detection Filter for Logwatch

use strict;
my %intrusions;
my %blocked_ips;
my $detail = $ENV{'LOGWATCH_DETAIL_LEVEL'} || 0;

while (defined(my $line = <STDIN>)) {
    chomp($line);
    
    # Port scanning detection
    if ($line =~ /possible port scan.*from (\S+)/) {
        $intrusions{"Port Scans"}{$1}++;
    }
    
    # Brute force detection
    if ($line =~ /Failed password.*from (\S+)/) {
        $intrusions{"Brute Force Attempts"}{$1}++;
    }
    
    # Blocked IPs
    if ($line =~ /DROP.*SRC=(\S+)/) {
        $blocked_ips{$1}++;
    }
}

# Output report
if (keys %intrusions) {
    print "\n--------------------- Intrusion Detection --------------------\n";
    
    foreach my $type (sort keys %intrusions) {
        print "\n$type:\n";
        foreach my $ip (sort {$intrusions{$type}{$b} <=> $intrusions{$type}{$a}} keys %{$intrusions{$type}}) {
            printf "   %-20s: %d attempts\n", $ip, $intrusions{$type}{$ip};
        }
    }
}

if (keys %blocked_ips && $detail >= 5) {
    print "\n--------------------- Blocked IPs --------------------\n";
    foreach my $ip (sort {$blocked_ips{$b} <=> $blocked_ips{$a}} keys %blocked_ips) {
        printf "   %-20s: %d blocks\n", $ip, $blocked_ips{$ip};
    }
}

exit(0);
EOF

    sudo chmod +x "$LOGWATCH_SCRIPTS_DIR/services/intrusion"

    # Create Docker monitoring filter
    cat << 'EOF' | sudo tee "$LOGWATCH_SCRIPTS_DIR/services/docker" > /dev/null
#!/usr/bin/perl
# Docker Container Monitoring for Logwatch

use strict;
my %containers;
my %errors;
my $detail = $ENV{'LOGWATCH_DETAIL_LEVEL'} || 0;

while (defined(my $line = <STDIN>)) {
    chomp($line);
    
    # Container starts/stops
    if ($line =~ /container (start|stop|die).*name="([^"]+)"/) {
        $containers{$2}{$1}++;
    }
    
    # Container errors
    if ($line =~ /level=error.*container=([^\s]+)\s+(.*)/) {
        $errors{$1}++;
    }
}

# Output report
if (keys %containers) {
    print "\n--------------------- Docker Containers --------------------\n";
    
    foreach my $container (sort keys %containers) {
        print "\nContainer: $container\n";
        foreach my $action (sort keys %{$containers{$container}}) {
            printf "   %-10s: %d times\n", $action, $containers{$container}{$action};
        }
    }
}

if (keys %errors && $detail >= 5) {
    print "\n--------------------- Docker Errors --------------------\n";
    foreach my $container (sort keys %errors) {
        printf "   %-30s: %d errors\n", $container, $errors{$container};
    }
}

exit(0);
EOF

    sudo chmod +x "$LOGWATCH_SCRIPTS_DIR/services/docker"

    # Create configuration for custom filters
    cat << 'EOF' | sudo tee "$CUSTOM_CONF_DIR/services/intrusion.conf" > /dev/null
# Intrusion Detection Service
Title = "Intrusion Detection Report"
LogFile = messages
LogFile = secure
LogFile = auth
EOF

    cat << 'EOF' | sudo tee "$CUSTOM_CONF_DIR/services/docker.conf" > /dev/null
# Docker Service
Title = "Docker Container Report"
LogFile = docker
LogFile = messages
*OnlyContains = docker
EOF

    print_success "Custom security filters created"
    return 0
}

# ============================================================================
# Report Generation
# ============================================================================

# Generate report
generate_report() {
    local range="${1:-$DEFAULT_RANGE}"
    local detail="${2:-$DEFAULT_DETAIL}"
    local format="${3:-$DEFAULT_FORMAT}"
    local output_file="$REPORT_DIR/report-$(date +%Y%m%d-%H%M%S).$format"
    
    print_header "Generating Logwatch Report"
    print_status "Range: $range, Detail: $detail, Format: $format"

    # Generate report
    sudo logwatch \
        --range "$range" \
        --detail "$detail" \
        --format "$format" \
        --output file \
        --save "$output_file"

    if [ -f "$output_file" ]; then
        print_success "Report generated: $output_file"
        
        # Show summary if text format
        if [ "$format" = "text" ]; then
            echo ""
            echo "Report Summary:"
            head -50 "$output_file"
            echo "..."
            echo "(Full report saved to: $output_file)"
        fi
    else
        print_error "Failed to generate report"
        return 1
    fi

    return 0
}

# Generate security-focused report
generate_security_report() {
    local output_file="$REPORT_DIR/security-report-$(date +%Y%m%d-%H%M%S).txt"
    
    print_header "Generating Security-Focused Report"

    # Create temporary config for security focus
    cat << EOF | sudo tee /tmp/logwatch-security.conf > /dev/null
Output = file
Filename = $output_file
Format = text
Range = yesterday
Detail = High
Service = sshd
Service = sudo
Service = pam_unix
Service = iptables
Service = kernel
Service = intrusion
Service = docker
Service = fail2ban
Service = crowdsec
EOF

    # Generate report
    sudo logwatch --config-file /tmp/logwatch-security.conf

    # Clean up
    rm -f /tmp/logwatch-security.conf

    if [ -f "$output_file" ]; then
        print_success "Security report generated: $output_file"
        
        # Extract key security metrics
        echo ""
        echo "Security Metrics:"
        echo "  Failed SSH attempts: $(grep -c 'Failed password' "$output_file" 2>/dev/null || echo 0)"
        echo "  Sudo commands: $(grep -c 'sudo:' "$output_file" 2>/dev/null || echo 0)"
        echo "  Firewall blocks: $(grep -c 'DROP' "$output_file" 2>/dev/null || echo 0)"
    else
        print_error "Failed to generate security report"
        return 1
    fi

    return 0
}

# ============================================================================
# Scheduled Reports
# ============================================================================

# Configure scheduled reports
configure_scheduled_reports() {
    print_status "Configuring scheduled reports..."

    # Create daily report script
    cat << 'EOF' | sudo tee /usr/local/bin/logwatch-daily > /dev/null
#!/bin/bash
# Daily Logwatch Report Script

REPORT_DIR="/var/log/logwatch"
DATE=$(date +%Y%m%d)

# Ensure directory exists
mkdir -p "$REPORT_DIR"

# Generate daily report
logwatch \
    --range yesterday \
    --detail Med \
    --format text \
    --output file \
    --save "$REPORT_DIR/daily-$DATE.txt"

# Generate security report
logwatch \
    --range yesterday \
    --detail High \
    --format text \
    --service sshd \
    --service sudo \
    --service iptables \
    --output file \
    --save "$REPORT_DIR/security-$DATE.txt"

# Email if configured
if [ -n "$MAILTO" ]; then
    cat "$REPORT_DIR/daily-$DATE.txt" | mail -s "Daily Logwatch Report - $(hostname)" "$MAILTO"
fi

# Cleanup old reports (keep 30 days)
find "$REPORT_DIR" -name "*.txt" -mtime +30 -delete
EOF

    sudo chmod +x /usr/local/bin/logwatch-daily

    # Create weekly summary script
    cat << 'EOF' | sudo tee /usr/local/bin/logwatch-weekly > /dev/null
#!/bin/bash
# Weekly Logwatch Summary Script

REPORT_DIR="/var/log/logwatch"
DATE=$(date +%Y%m%d)

# Generate weekly summary
logwatch \
    --range 'between -7 days and -1 days' \
    --detail Low \
    --format html \
    --output file \
    --save "$REPORT_DIR/weekly-$DATE.html"

# Email if configured
if [ -n "$MAILTO" ]; then
    cat "$REPORT_DIR/weekly-$DATE.html" | mail -s "Weekly Logwatch Summary - $(hostname)" -a "Content-Type: text/html" "$MAILTO"
fi
EOF

    sudo chmod +x /usr/local/bin/logwatch-weekly

    # Add to crontab
    # Daily report at 6 AM
    (crontab -l 2>/dev/null | grep -v "logwatch-daily"; echo "0 6 * * * /usr/local/bin/logwatch-daily") | crontab -
    
    # Weekly report on Mondays at 7 AM
    (crontab -l 2>/dev/null | grep -v "logwatch-weekly"; echo "0 7 * * 1 /usr/local/bin/logwatch-weekly") | crontab -

    print_success "Scheduled reports configured"
    return 0
}

# ============================================================================
# Real-time Monitoring
# ============================================================================

# Monitor logs in real-time
monitor_realtime() {
    local service="${1:-all}"
    
    print_header "Real-time Log Monitoring: $service"

    case "$service" in
        ssh)
            print_status "Monitoring SSH logs..."
            sudo tail -f /var/log/auth.log | grep -E "sshd|Failed|Accepted"
            ;;
        
        firewall)
            print_status "Monitoring firewall logs..."
            sudo tail -f /var/log/kern.log | grep -E "DROP|REJECT|ACCEPT"
            ;;
        
        sudo)
            print_status "Monitoring sudo usage..."
            sudo tail -f /var/log/auth.log | grep "sudo:"
            ;;
        
        docker)
            print_status "Monitoring Docker logs..."
            if command -v docker &>/dev/null; then
                sudo docker events
            else
                print_error "Docker not installed"
                return 1
            fi
            ;;
        
        system)
            print_status "Monitoring system logs..."
            sudo journalctl -f
            ;;
        
        all)
            print_status "Monitoring all security-relevant logs..."
            sudo tail -f /var/log/auth.log /var/log/kern.log /var/log/syslog | \
                grep -E "Failed|error|warning|critical|DROP|REJECT"
            ;;
        
        *)
            print_error "Unknown service: $service"
            echo "Available: ssh, firewall, sudo, docker, system, all"
            return 1
            ;;
    esac

    return 0
}

# ============================================================================
# Alert Configuration
# ============================================================================

# Configure alerts
configure_alerts() {
    local email="${1:-$DEFAULT_MAILTO}"
    
    print_status "Configuring Logwatch alerts..."

    # Create alert script
    cat << EOF | sudo tee /usr/local/bin/logwatch-alert > /dev/null
#!/bin/bash
# Logwatch Alert Script

# Thresholds
SSH_FAIL_THRESHOLD=10
SUDO_FAIL_THRESHOLD=5
FIREWALL_DROP_THRESHOLD=100

# Check recent logs
SSH_FAILS=\$(grep -c "Failed password" /var/log/auth.log 2>/dev/null || echo 0)
SUDO_FAILS=\$(grep -c "sudo.*incorrect password" /var/log/auth.log 2>/dev/null || echo 0)
FW_DROPS=\$(grep -c "DROP" /var/log/kern.log 2>/dev/null || echo 0)

# Generate alert if thresholds exceeded
ALERT_NEEDED=false
ALERT_MSG=""

if [ "\$SSH_FAILS" -gt \$SSH_FAIL_THRESHOLD ]; then
    ALERT_NEEDED=true
    ALERT_MSG="\${ALERT_MSG}SSH Failed Logins: \$SSH_FAILS (threshold: \$SSH_FAIL_THRESHOLD)\n"
fi

if [ "\$SUDO_FAILS" -gt \$SUDO_FAIL_THRESHOLD ]; then
    ALERT_NEEDED=true
    ALERT_MSG="\${ALERT_MSG}Sudo Failures: \$SUDO_FAILS (threshold: \$SUDO_FAIL_THRESHOLD)\n"
fi

if [ "\$FW_DROPS" -gt \$FIREWALL_DROP_THRESHOLD ]; then
    ALERT_NEEDED=true
    ALERT_MSG="\${ALERT_MSG}Firewall Drops: \$FW_DROPS (threshold: \$FIREWALL_DROP_THRESHOLD)\n"
fi

# Send alert if needed
if [ "\$ALERT_NEEDED" = true ]; then
    echo "Security Alert - \$(hostname) - \$(date)" > /tmp/logwatch-alert.txt
    echo "=========================================" >> /tmp/logwatch-alert.txt
    echo "" >> /tmp/logwatch-alert.txt
    echo "\$ALERT_MSG" >> /tmp/logwatch-alert.txt
    echo "" >> /tmp/logwatch-alert.txt
    echo "Please review the full logs for details." >> /tmp/logwatch-alert.txt
    
    # Send email if configured
    if [ -n "$email" ]; then
        cat /tmp/logwatch-alert.txt | mail -s "SECURITY ALERT - \$(hostname)" "$email"
    fi
    
    # Log to syslog
    logger -t logwatch-alert -p security.warning "Security thresholds exceeded"
    
    rm -f /tmp/logwatch-alert.txt
fi
EOF

    sudo chmod +x /usr/local/bin/logwatch-alert

    # Add to crontab (every hour)
    (crontab -l 2>/dev/null | grep -v "logwatch-alert"; echo "0 * * * * /usr/local/bin/logwatch-alert") | crontab -

    print_success "Alerts configured with email: $email"
    return 0
}

# ============================================================================
# Analysis Tools
# ============================================================================

# Analyze specific time period
analyze_period() {
    local start_date="${1:-yesterday}"
    local end_date="${2:-today}"
    
    print_header "Analyzing Logs: $start_date to $end_date"

    # Create temporary analysis config
    cat << EOF | sudo tee /tmp/logwatch-analysis.conf > /dev/null
Output = stdout
Format = text
Range = between $start_date and $end_date
Detail = High
Service = All
EOF

    # Run analysis
    sudo logwatch --config-file /tmp/logwatch-analysis.conf | less

    # Clean up
    rm -f /tmp/logwatch-analysis.conf

    return 0
}

# Top security events
top_security_events() {
    local count="${1:-10}"
    
    print_header "Top $count Security Events"

    echo "Top Failed SSH Attempts:"
    sudo grep "Failed password" /var/log/auth.log 2>/dev/null | \
        awk '{print $(NF-3)}' | sort | uniq -c | sort -rn | head -"$count"
    
    echo ""
    echo "Top Sudo Users:"
    sudo grep "sudo:" /var/log/auth.log 2>/dev/null | \
        awk '{print $6}' | sort | uniq -c | sort -rn | head -"$count"
    
    echo ""
    echo "Top Blocked IPs:"
    sudo grep "DROP" /var/log/kern.log 2>/dev/null | \
        grep -oE "SRC=[0-9.]+" | cut -d= -f2 | sort | uniq -c | sort -rn | head -"$count"
    
    return 0
}

# ============================================================================
# Complete Setup
# ============================================================================

# Run complete Logwatch setup
setup_logwatch_complete() {
    print_header "Complete Logwatch Setup"

    # Install Logwatch
    install_logwatch || return 1
    
    # Configure Logwatch
    configure_logwatch
    
    # Create custom filters
    create_security_filters
    
    # Configure scheduled reports
    configure_scheduled_reports
    
    # Configure alerts
    if confirm_action "Configure email alerts?"; then
        read -p "Enter email address for alerts: " email
        configure_alerts "${email:-root}"
    fi
    
    # Generate initial reports
    generate_report "today" "Med" "text"
    generate_security_report
    
    print_success "Logwatch setup completed!"
    print_status "Report directory: $REPORT_DIR"
    print_status "Configuration: $CUSTOM_CONF_DIR"
    print_status "Daily reports: 6 AM"
    print_status "Weekly summaries: Monday 7 AM"
    
    return 0
}

# ============================================================================
# Module Management
# ============================================================================

# Show module help
show_help() {
    cat << EOF
Logwatch Log Analysis Module v${MODULE_VERSION}

Usage: $0 [OPTIONS]

OPTIONS:
    --install               Install Logwatch
    --configure             Configure Logwatch
    --report [RANGE]        Generate report (yesterday/today/all)
    --security-report       Generate security-focused report
    --schedule              Configure scheduled reports
    --alerts [EMAIL]        Configure email alerts
    --monitor [SERVICE]     Real-time monitoring (ssh/firewall/sudo/docker/all)
    --analyze START END     Analyze specific period
    --top [COUNT]           Show top security events
    --complete              Complete setup with all features
    --help                  Show this help message
    --test                  Run module self-test

EXAMPLES:
    # Install and configure
    $0 --install
    $0 --complete
    
    # Generate reports
    $0 --report yesterday
    $0 --security-report
    
    # Real-time monitoring
    $0 --monitor ssh
    $0 --monitor all
    
    # Analysis
    $0 --analyze "7 days ago" "today"
    $0 --top 20

FILES:
    Configuration: $CUSTOM_CONF_DIR
    Reports: $REPORT_DIR
    Scripts: $LOGWATCH_SCRIPTS_DIR

EOF
}

# Run self-test
run_self_test() {
    print_header "Running Logwatch Module Self-Test"
    
    local tests_passed=0
    local tests_failed=0
    
    # Test: Check if package manager available
    if command -v apt &>/dev/null; then
        ((tests_passed++))
        print_success "Package manager available"
    else
        ((tests_failed++))
        print_error "Package manager not available"
    fi
    
    # Test: Check log directory
    if [ -d "/var/log" ] && [ -r "/var/log" ]; then
        ((tests_passed++))
        print_success "Log directory accessible"
    else
        ((tests_failed++))
        print_error "Log directory not accessible"
    fi
    
    # Test: Check if logs exist
    if [ -f "/var/log/auth.log" ] || [ -f "/var/log/syslog" ]; then
        ((tests_passed++))
        print_success "System logs found"
    else
        ((tests_failed++))
        print_warning "System logs not found"
    fi
    
    # Test: Check mail command
    if command -v mail &>/dev/null || command -v sendmail &>/dev/null; then
        ((tests_passed++))
        print_success "Mail system available"
    else
        ((tests_failed++))
        print_warning "Mail system not available (alerts may not work)"
    fi
    
    # Summary
    echo ""
    echo "Test Results:"
    echo "  Passed: $tests_passed"
    echo "  Failed: $tests_failed"
    
    if [ $tests_failed -eq 0 ]; then
        print_success "All tests passed!"
        return 0
    else
        print_warning "Some tests failed, but module may still work"
        return 1
    fi
}

# Confirm action helper
confirm_action() {
    local prompt="${1:-Continue?}"
    read -p "$prompt [y/N]: " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]]
}

# Export all functions
export -f install_logwatch configure_logwatch
export -f create_security_filters generate_report
export -f generate_security_report configure_scheduled_reports
export -f monitor_realtime configure_alerts
export -f analyze_period top_security_events
export -f setup_logwatch_complete

# Source required libraries
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/../lib/common.sh" 2>/dev/null || true

# Main execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    case "${1:-}" in
        --install)
            install_logwatch
            ;;
        --configure)
            configure_logwatch
            ;;
        --report)
            generate_report "${2:-yesterday}" "${3:-Med}" "${4:-text}"
            ;;
        --security-report)
            generate_security_report
            ;;
        --schedule)
            configure_scheduled_reports
            ;;
        --alerts)
            configure_alerts "${2:-root}"
            ;;
        --monitor)
            monitor_realtime "${2:-all}"
            ;;
        --analyze)
            analyze_period "${2:-yesterday}" "${3:-today}"
            ;;
        --top)
            top_security_events "${2:-10}"
            ;;
        --complete)
            setup_logwatch_complete
            ;;
        --help)
            show_help
            ;;
        --test)
            run_self_test
            ;;
        *)
            echo "Logwatch Log Analysis Module v${MODULE_VERSION}"
            echo "Run with --help for usage information"
            ;;
    esac
fi