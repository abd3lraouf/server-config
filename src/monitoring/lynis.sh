#!/bin/bash
# Lynis Security Auditing module - System security auditing and hardening recommendations
# Implements comprehensive security auditing using Lynis for CIS benchmark compliance

# Script metadata
[[ -z "${MODULE_VERSION:-}" ]] && readonly MODULE_VERSION="1.0.0"
[[ -z "${MODULE_NAME:-}" ]] && readonly MODULE_NAME="lynis-auditing"

# Configuration
readonly LYNIS_DIR="/usr/local/lynis"
readonly LYNIS_LOG_DIR="/var/log/lynis"
readonly LYNIS_REPORT_DIR="/var/log/lynis/reports"
readonly LYNIS_PROFILE="/etc/lynis/custom.prf"
readonly AUDIT_SCHEDULE="daily"  # daily, weekly, monthly

# ============================================================================
# Installation and Setup
# ============================================================================

# Install Lynis
install_lynis() {
    print_header "Installing Lynis Security Auditing Tool"

    # Check if already installed
    if command -v lynis &>/dev/null || [ -f "$LYNIS_DIR/lynis" ]; then
        print_warning "Lynis is already installed"
        lynis show version
        return 0
    fi

    # Method 1: Install from official repository (preferred)
    print_status "Installing Lynis from official repository..."
    
    # Add Lynis repository key
    wget -O - https://packages.cisofy.com/keys/cisofy-software-public.key | sudo apt-key add -
    
    # Add repository
    echo "deb https://packages.cisofy.com/community/lynis/deb/ stable main" | sudo tee /etc/apt/sources.list.d/cisofy-lynis.list
    
    # Update and install
    sudo apt update
    sudo apt install -y lynis

    # Alternative Method: Git installation for latest version
    if ! command -v lynis &>/dev/null; then
        print_status "Installing Lynis from Git repository..."
        
        sudo apt install -y git
        
        # Clone repository
        sudo git clone https://github.com/CISOfy/lynis "$LYNIS_DIR"
        
        # Create symlink
        sudo ln -sf "$LYNIS_DIR/lynis" /usr/local/bin/lynis
        
        # Set permissions
        sudo chown -R root:root "$LYNIS_DIR"
        sudo chmod 755 "$LYNIS_DIR/lynis"
    fi

    # Create directories
    sudo mkdir -p "$LYNIS_LOG_DIR" "$LYNIS_REPORT_DIR"
    sudo chmod 755 "$LYNIS_LOG_DIR" "$LYNIS_REPORT_DIR"

    # Verify installation
    if command -v lynis &>/dev/null || [ -f "$LYNIS_DIR/lynis" ]; then
        print_success "Lynis installed successfully"
        lynis show version
    else
        print_error "Failed to install Lynis"
        return 1
    fi

    return 0
}

# ============================================================================
# Custom Profile Configuration
# ============================================================================

# Create custom Lynis profile
create_custom_profile() {
    print_status "Creating custom Lynis profile..."

    # Create profile directory
    sudo mkdir -p /etc/lynis

    # Create custom profile
    cat << 'EOF' | sudo tee "$LYNIS_PROFILE" > /dev/null
# Lynis Custom Profile - Zero Trust Security
# Generated by Ubuntu Server Configuration Script

# Profile metadata
profile_name="Zero Trust Security Profile"
profile_version="1.0"
profile_description="Custom security profile for Zero Trust architecture"

# ============================================================================
# Skip Tests
# ============================================================================

# Skip container-specific tests if not in container
skip-test=CONT-8004
skip-test=CONT-8104

# Skip desktop-specific tests on servers
skip-test=PRNT-2307
skip-test=PRNT-2308

# ============================================================================
# Custom Settings
# ============================================================================

# Minimum password length
password_min_length=14

# Maximum password age (days)
password_max_age=90

# Minimum days between password changes
password_min_days=1

# Warning days before password expiry
password_warning_age=14

# SSH settings
ssh_port=22
ssh_protocol=2
ssh_permit_root_login=no
ssh_password_authentication=no
ssh_pubkey_authentication=yes
ssh_max_auth_tries=3
ssh_client_alive_interval=300
ssh_client_alive_count_max=0

# Firewall settings
firewall_enabled=yes
firewall_policy_input=drop
firewall_policy_output=accept
firewall_policy_forward=drop

# File permissions
file_permissions_umask=027
file_permissions_home=700

# Kernel hardening
kernel_hardening=yes
kernel_module_blacklisting=yes

# Network settings
network_ipv4_forwarding=no
network_ipv6_enabled=no
network_synflood_protection=yes

# Logging
logging_syslog=yes
logging_auditd=yes
logging_fail2ban=yes

# Updates
updates_unattended=yes
updates_security_only=no

# ============================================================================
# Custom Tests
# ============================================================================

# Enable all security tests
test_compliance_enable=yes
test_security_enable=yes
test_vulnerability_enable=yes

# Custom test weights (1-10, higher = more important)
test_weight_authentication=10
test_weight_networking=9
test_weight_filesystems=8
test_weight_kernel=9
test_weight_logging=8
test_weight_services=7
test_weight_software=7
test_weight_containers=6

# ============================================================================
# Plugins
# ============================================================================

# Enable official plugins
plugin=compliance-pci-dss
plugin=compliance-hipaa
plugin=compliance-iso27001
plugin=compliance-gdpr

# ============================================================================
# Output Settings
# ============================================================================

# Report settings
report_show_summary=yes
report_show_warnings=yes
report_show_suggestions=yes
report_show_tests_performed=yes
report_show_tests_skipped=no

# Colors in output
colors=yes

# Verbose output
verbose=no

# Quick mode (less intensive)
quick=no

# ============================================================================
# Alerting
# ============================================================================

# Alert on warnings
alert_on_warnings=yes

# Alert on high-risk findings
alert_on_high_risk=yes

# Minimum score for alerting (0-100)
alert_minimum_score=70

# ============================================================================
# Enterprise Settings
# ============================================================================

# Upload data to central node (if configured)
upload_server=""
upload_protocol="https"
upload_port=443

# Host information
hostid="${HOSTNAME:-localhost}"
hostid2=""

# License key (for Lynis Enterprise)
license_key=""

EOF

    print_success "Custom Lynis profile created"
    return 0
}

# ============================================================================
# Security Auditing
# ============================================================================

# Run security audit
run_audit() {
    local audit_type="${1:-system}"  # system, docker, web, custom
    local output_file="$LYNIS_REPORT_DIR/audit-$(date +%Y%m%d-%H%M%S).log"
    
    print_header "Running Lynis Security Audit: $audit_type"

    # Ensure Lynis is installed
    if ! command -v lynis &>/dev/null && [ ! -f "$LYNIS_DIR/lynis" ]; then
        print_error "Lynis is not installed"
        return 1
    fi

    # Set Lynis command
    local lynis_cmd="lynis"
    [ -f "$LYNIS_DIR/lynis" ] && lynis_cmd="$LYNIS_DIR/lynis"

    # Common audit options
    local audit_opts=""
    audit_opts="$audit_opts --profile $LYNIS_PROFILE"
    audit_opts="$audit_opts --log-file $output_file"
    audit_opts="$audit_opts --no-colors"
    audit_opts="$audit_opts --quiet"

    case "$audit_type" in
        system)
            print_status "Running comprehensive system audit..."
            sudo $lynis_cmd audit system $audit_opts
            ;;
        
        docker)
            print_status "Running Docker security audit..."
            if ! command -v docker &>/dev/null; then
                print_warning "Docker not installed, skipping Docker audit"
                return 1
            fi
            sudo $lynis_cmd audit dockerfile $audit_opts
            sudo $lynis_cmd audit docker-container $audit_opts
            ;;
        
        web)
            print_status "Running web server security audit..."
            sudo $lynis_cmd audit system $audit_opts --tests-from-group webservers
            ;;
        
        quick)
            print_status "Running quick security audit..."
            sudo $lynis_cmd audit system $audit_opts --quick
            ;;
        
        pentest)
            print_status "Running pentest simulation audit..."
            sudo $lynis_cmd audit system $audit_opts --pentest
            ;;
        
        custom)
            print_status "Running custom audit..."
            sudo $lynis_cmd audit system $audit_opts
            ;;
        
        *)
            print_error "Unknown audit type: $audit_type"
            return 1
            ;;
    esac

    # Parse and display results
    if [ -f "$output_file" ]; then
        print_success "Audit completed. Results saved to: $output_file"
        parse_audit_results "$output_file"
    else
        print_error "Audit failed - no output file generated"
        return 1
    fi

    return 0
}

# Parse audit results
parse_audit_results() {
    local log_file="${1:-}"
    
    if [ -z "$log_file" ] || [ ! -f "$log_file" ]; then
        print_error "No log file specified or file not found"
        return 1
    fi

    print_header "Lynis Audit Results Summary"

    # Extract key metrics
    local hardening_index=$(grep "Hardening index" "$log_file" | awk '{print $NF}')
    local warnings=$(grep -c "^warning\[" "$log_file" || true)
    local suggestions=$(grep -c "^suggestion\[" "$log_file" || true)
    
    echo "Hardening Index: ${hardening_index:-N/A}"
    echo "Warnings: $warnings"
    echo "Suggestions: $suggestions"
    echo ""

    # Show warnings if any
    if [ "$warnings" -gt 0 ]; then
        echo "Top Warnings:"
        grep "^warning\[" "$log_file" | head -5 | while read -r line; do
            echo "  • ${line#warning\[*\] }"
        done
        echo ""
    fi

    # Show suggestions
    if [ "$suggestions" -gt 0 ]; then
        echo "Top Suggestions:"
        grep "^suggestion\[" "$log_file" | head -5 | while read -r line; do
            echo "  • ${line#suggestion\[*\] }"
        done
        echo ""
    fi

    # Check if score meets threshold
    local threshold=70
    if [ -n "$hardening_index" ] && [ "$hardening_index" -lt "$threshold" ]; then
        print_warning "Hardening index ($hardening_index) is below threshold ($threshold)"
        print_status "Run 'lynis show details' for improvement recommendations"
    else
        print_success "Security posture is acceptable"
    fi

    return 0
}

# ============================================================================
# Scheduled Auditing
# ============================================================================

# Configure scheduled audits
configure_scheduled_audits() {
    print_status "Configuring scheduled Lynis audits..."

    # Create audit script
    cat << 'EOF' | sudo tee /usr/local/bin/lynis-scheduled-audit > /dev/null
#!/bin/bash
# Lynis Scheduled Audit Script

LOG_DIR="/var/log/lynis/reports"
REPORT_FILE="$LOG_DIR/scheduled-audit-$(date +%Y%m%d).log"
SUMMARY_FILE="$LOG_DIR/latest-summary.txt"

# Ensure log directory exists
mkdir -p "$LOG_DIR"

# Run audit
if command -v lynis &>/dev/null; then
    lynis audit system --cronjob --log-file "$REPORT_FILE" --profile /etc/lynis/custom.prf
    
    # Generate summary
    echo "Lynis Security Audit - $(date)" > "$SUMMARY_FILE"
    echo "================================" >> "$SUMMARY_FILE"
    grep "Hardening index" "$REPORT_FILE" >> "$SUMMARY_FILE"
    echo "" >> "$SUMMARY_FILE"
    echo "Warnings:" >> "$SUMMARY_FILE"
    grep "^warning\[" "$REPORT_FILE" | head -10 >> "$SUMMARY_FILE"
    echo "" >> "$SUMMARY_FILE"
    echo "Suggestions:" >> "$SUMMARY_FILE"
    grep "^suggestion\[" "$REPORT_FILE" | head -10 >> "$SUMMARY_FILE"
    
    # Check for critical issues
    if grep -q "warning\[HIGH\]" "$REPORT_FILE"; then
        # Send alert (customize as needed)
        echo "CRITICAL: High-risk security issues detected" | logger -t lynis-audit
    fi
fi
EOF

    sudo chmod +x /usr/local/bin/lynis-scheduled-audit

    # Configure cron job based on schedule
    local cron_schedule
    case "$AUDIT_SCHEDULE" in
        daily)
            cron_schedule="0 2 * * *"  # 2 AM daily
            ;;
        weekly)
            cron_schedule="0 2 * * 0"  # 2 AM on Sundays
            ;;
        monthly)
            cron_schedule="0 2 1 * *"  # 2 AM on 1st of month
            ;;
        *)
            cron_schedule="0 2 * * *"  # Default to daily
            ;;
    esac

    # Add to crontab
    (crontab -l 2>/dev/null | grep -v "lynis-scheduled-audit"; echo "$cron_schedule /usr/local/bin/lynis-scheduled-audit") | crontab -

    print_success "Scheduled audits configured: $AUDIT_SCHEDULE"
    return 0
}

# ============================================================================
# Compliance Checking
# ============================================================================

# Check compliance against standards
check_compliance() {
    local standard="${1:-cis}"  # cis, pci-dss, hipaa, iso27001, gdpr
    
    print_header "Checking Compliance: $standard"

    local lynis_cmd="lynis"
    [ -f "$LYNIS_DIR/lynis" ] && lynis_cmd="$LYNIS_DIR/lynis"

    case "$standard" in
        cis)
            print_status "Checking CIS Benchmark compliance..."
            sudo $lynis_cmd audit system --compliance-standard cis
            ;;
        
        pci-dss)
            print_status "Checking PCI-DSS compliance..."
            sudo $lynis_cmd audit system --compliance-standard pci-dss
            ;;
        
        hipaa)
            print_status "Checking HIPAA compliance..."
            sudo $lynis_cmd audit system --compliance-standard hipaa
            ;;
        
        iso27001)
            print_status "Checking ISO 27001 compliance..."
            sudo $lynis_cmd audit system --compliance-standard iso27001
            ;;
        
        gdpr)
            print_status "Checking GDPR compliance..."
            sudo $lynis_cmd audit system --compliance-standard gdpr
            ;;
        
        all)
            print_status "Checking all compliance standards..."
            for std in cis pci-dss hipaa iso27001 gdpr; do
                check_compliance "$std"
            done
            ;;
        
        *)
            print_error "Unknown compliance standard: $standard"
            return 1
            ;;
    esac

    return 0
}

# ============================================================================
# Hardening Recommendations
# ============================================================================

# Apply hardening recommendations
apply_hardening() {
    local category="${1:-basic}"  # basic, moderate, strict
    
    print_header "Applying Hardening Recommendations: $category"

    case "$category" in
        basic)
            print_status "Applying basic hardening..."
            
            # SSH hardening
            sudo sed -i 's/^#*PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
            sudo sed -i 's/^#*PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config
            
            # Kernel parameters
            echo "kernel.randomize_va_space = 2" | sudo tee -a /etc/sysctl.d/99-security.conf
            echo "net.ipv4.tcp_syncookies = 1" | sudo tee -a /etc/sysctl.d/99-security.conf
            
            sudo sysctl -p /etc/sysctl.d/99-security.conf
            ;;
        
        moderate)
            apply_hardening basic
            
            print_status "Applying moderate hardening..."
            
            # Additional kernel hardening
            cat << 'EOF' | sudo tee -a /etc/sysctl.d/99-security.conf
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
EOF
            sudo sysctl -p /etc/sysctl.d/99-security.conf
            
            # File permissions
            sudo chmod 644 /etc/passwd
            sudo chmod 640 /etc/shadow
            sudo chmod 644 /etc/group
            sudo chmod 640 /etc/gshadow
            ;;
        
        strict)
            apply_hardening moderate
            
            print_status "Applying strict hardening..."
            
            # Disable unused network protocols
            echo "install dccp /bin/true" | sudo tee -a /etc/modprobe.d/blacklist-rare-network.conf
            echo "install sctp /bin/true" | sudo tee -a /etc/modprobe.d/blacklist-rare-network.conf
            echo "install rds /bin/true" | sudo tee -a /etc/modprobe.d/blacklist-rare-network.conf
            echo "install tipc /bin/true" | sudo tee -a /etc/modprobe.d/blacklist-rare-network.conf
            
            # Core dumps
            echo "* hard core 0" | sudo tee -a /etc/security/limits.conf
            echo "fs.suid_dumpable = 0" | sudo tee -a /etc/sysctl.d/99-security.conf
            
            sudo sysctl -p /etc/sysctl.d/99-security.conf
            ;;
        
        *)
            print_error "Unknown hardening category: $category"
            return 1
            ;;
    esac

    print_success "Hardening recommendations applied: $category"
    return 0
}

# ============================================================================
# Reporting
# ============================================================================

# Generate security report
generate_report() {
    local format="${1:-html}"  # html, json, txt
    local output_file="$LYNIS_REPORT_DIR/security-report-$(date +%Y%m%d-%H%M%S).$format"
    
    print_header "Generating Security Report: $format"

    # Run fresh audit
    local temp_log="/tmp/lynis-temp-$$.log"
    sudo lynis audit system --log-file "$temp_log" --quiet

    case "$format" in
        html)
            generate_html_report "$temp_log" "$output_file"
            ;;
        
        json)
            generate_json_report "$temp_log" "$output_file"
            ;;
        
        txt)
            cp "$temp_log" "$output_file"
            ;;
        
        *)
            print_error "Unknown report format: $format"
            rm -f "$temp_log"
            return 1
            ;;
    esac

    rm -f "$temp_log"
    
    if [ -f "$output_file" ]; then
        print_success "Report generated: $output_file"
    else
        print_error "Failed to generate report"
        return 1
    fi

    return 0
}

# Generate HTML report
generate_html_report() {
    local log_file="$1"
    local output_file="$2"
    
    cat << 'EOF' > "$output_file"
<!DOCTYPE html>
<html>
<head>
    <title>Lynis Security Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #333; }
        .metric { padding: 10px; margin: 10px 0; background: #f0f0f0; }
        .warning { color: #ff9800; }
        .critical { color: #f44336; }
        .success { color: #4caf50; }
    </style>
</head>
<body>
    <h1>Lynis Security Audit Report</h1>
    <div class="metric">
        <h2>System Information</h2>
        <p>Hostname: $(hostname)</p>
        <p>Date: $(date)</p>
    </div>
    <div class="metric">
        <h2>Security Metrics</h2>
EOF

    # Add metrics from log
    echo "<p>Hardening Index: $(grep 'Hardening index' "$log_file" | awk '{print $NF}')</p>" >> "$output_file"
    echo "<p>Warnings: $(grep -c '^warning\[' "$log_file" || echo 0)</p>" >> "$output_file"
    echo "<p>Suggestions: $(grep -c '^suggestion\[' "$log_file" || echo 0)</p>" >> "$output_file"
    
    echo "</div></body></html>" >> "$output_file"
}

# Generate JSON report
generate_json_report() {
    local log_file="$1"
    local output_file="$2"
    
    cat << EOF > "$output_file"
{
    "report": {
        "hostname": "$(hostname)",
        "date": "$(date -Iseconds)",
        "hardening_index": "$(grep 'Hardening index' "$log_file" | awk '{print $NF}')",
        "warnings": $(grep -c '^warning\[' "$log_file" || echo 0),
        "suggestions": $(grep -c '^suggestion\[' "$log_file" || echo 0)
    }
}
EOF
}

# ============================================================================
# Update and Maintenance
# ============================================================================

# Update Lynis
update_lynis() {
    print_header "Updating Lynis"

    if command -v lynis &>/dev/null; then
        # Package manager installation
        print_status "Updating via package manager..."
        sudo apt update
        sudo apt upgrade -y lynis
    elif [ -d "$LYNIS_DIR/.git" ]; then
        # Git installation
        print_status "Updating via Git..."
        cd "$LYNIS_DIR"
        sudo git pull
    else
        print_warning "Cannot determine update method"
        return 1
    fi

    # Show version
    lynis show version
    
    print_success "Lynis updated successfully"
    return 0
}

# ============================================================================
# Complete Setup
# ============================================================================

# Run complete Lynis setup
setup_lynis_complete() {
    print_header "Complete Lynis Security Auditing Setup"

    # Install Lynis
    install_lynis || return 1
    
    # Create custom profile
    create_custom_profile
    
    # Configure scheduled audits
    configure_scheduled_audits
    
    # Run initial audit
    run_audit "system"
    
    # Apply basic hardening
    if confirm_action "Apply basic security hardening recommendations?"; then
        apply_hardening "basic"
    fi
    
    # Generate initial report
    generate_report "html"
    
    print_success "Lynis security auditing setup completed!"
    print_status "Reports directory: $LYNIS_REPORT_DIR"
    print_status "Custom profile: $LYNIS_PROFILE"
    print_status "Scheduled audits: $AUDIT_SCHEDULE"
    
    return 0
}

# ============================================================================
# Module Management
# ============================================================================

# Show module help
show_help() {
    cat << EOF
Lynis Security Auditing Module v${MODULE_VERSION}

Usage: $0 [OPTIONS]

OPTIONS:
    --install               Install Lynis
    --audit [TYPE]          Run security audit (system/docker/web/quick/pentest)
    --compliance [STD]      Check compliance (cis/pci-dss/hipaa/iso27001/gdpr/all)
    --harden [LEVEL]        Apply hardening (basic/moderate/strict)
    --schedule              Configure scheduled audits
    --report [FORMAT]       Generate report (html/json/txt)
    --update                Update Lynis to latest version
    --results [FILE]        Parse and display audit results
    --complete              Complete setup with all features
    --help                  Show this help message
    --test                  Run module self-test

EXAMPLES:
    # Install and configure
    $0 --install
    $0 --complete
    
    # Run audits
    $0 --audit system
    $0 --audit docker
    
    # Check compliance
    $0 --compliance cis
    $0 --compliance all
    
    # Apply hardening
    $0 --harden basic
    $0 --harden strict
    
    # Generate reports
    $0 --report html
    $0 --report json

FILES:
    Log Directory: $LYNIS_LOG_DIR
    Report Directory: $LYNIS_REPORT_DIR
    Custom Profile: $LYNIS_PROFILE

EOF
}

# Run self-test
run_self_test() {
    print_header "Running Lynis Module Self-Test"
    
    local tests_passed=0
    local tests_failed=0
    
    # Test: Check if Lynis can be installed
    if command -v apt &>/dev/null; then
        ((tests_passed++))
        print_success "Package manager available"
    else
        ((tests_failed++))
        print_error "Package manager not available"
    fi
    
    # Test: Check log directory permissions
    if [ -w "/var/log" ]; then
        ((tests_passed++))
        print_success "Log directory writable"
    else
        ((tests_failed++))
        print_error "Log directory not writable"
    fi
    
    # Test: Check network connectivity for updates
    if ping -c 1 -W 2 packages.cisofy.com &>/dev/null; then
        ((tests_passed++))
        print_success "Can reach Lynis repository"
    else
        ((tests_failed++))
        print_warning "Cannot reach Lynis repository"
    fi
    
    # Summary
    echo ""
    echo "Test Results:"
    echo "  Passed: $tests_passed"
    echo "  Failed: $tests_failed"
    
    if [ $tests_failed -eq 0 ]; then
        print_success "All tests passed!"
        return 0
    else
        print_warning "Some tests failed, but module may still work"
        return 1
    fi
}

# Confirm action helper
confirm_action() {
    local prompt="${1:-Continue?}"
    read -p "$prompt [y/N]: " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]]
}

# Export all functions
export -f install_lynis create_custom_profile
export -f run_audit parse_audit_results
export -f configure_scheduled_audits check_compliance
export -f apply_hardening generate_report
export -f update_lynis setup_lynis_complete

# Source required libraries
# Use existing SCRIPT_DIR if available, otherwise detect it
if [[ -z "${SCRIPT_DIR:-}" ]]; then
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

# Ensure SRC_DIR is set for module loading
if [[ -z "${SRC_DIR:-}" ]]; then
    SRC_DIR="${SCRIPT_DIR}/.."
fi
source "${SCRIPT_DIR}/../lib/common.sh" 2>/dev/null || true

# Main execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    case "${1:-}" in
        --install)
            install_lynis
            ;;
        --audit)
            run_audit "${2:-system}"
            ;;
        --compliance)
            check_compliance "${2:-cis}"
            ;;
        --harden)
            apply_hardening "${2:-basic}"
            ;;
        --schedule)
            configure_scheduled_audits
            ;;
        --report)
            generate_report "${2:-html}"
            ;;
        --update)
            update_lynis
            ;;
        --results)
            parse_audit_results "${2:-}"
            ;;
        --complete)
            setup_lynis_complete
            ;;
        --help)
            show_help
            ;;
        --test)
            run_self_test
            ;;
        *)
            echo "Lynis Security Auditing Module v${MODULE_VERSION}"
            echo "Run with --help for usage information"
            ;;
    esac
fi
